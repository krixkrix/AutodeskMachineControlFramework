<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Driver for the OpenFOAM CFD Solver" namespace="LibMCDriver_OpenFOAM" copyright="Autodesk Inc." year="2025" basename="libmcdriver_openfoam"
	version="2.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="1" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	
	<importcomponent uri="../../../ACT/LibMCEnv.xml" namespace="LibMCEnv"/>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />
		<error name="UNKNOWNIMAGEWRITEFORMAT" code="9" description="unknown image write format" />
		<error name="COULDNOTWRITEIMAGETODISK" code="10" description="could not write image to disk" />
		<error name="EMPTYFILENAME" code="11" description="empty file name" />
		<error name="COULDNOTCONVERTFILENAME" code="12" description="could not convert filename" />
		<error name="COULDNOTGETSHORTPATHNAME" code="13" description="could not get short path name" />
		<error name="COULDNOTCONVERTSHORTFILENAME" code="14" description="could not convert short path name" />
		<error name="INVALIDCASEIDENTIFIER" code="15" description="invalid case identifier" />
		<error name="CASEIDENTIFIERNOTFOUND" code="16" description="case identifier not found" />
		<error name="CASEIDENTIFIERALREADYEXISTS" code="17" description="case identifier already exists" />
		<error name="CANNOTRUNOPENFOAMCASE" code="18" description="can not run OpenFOAM case" />
		<error name="INVALIDOPENFOAMVERSION" code="19" description="invalid OpenFOAM Version" />
		<error name="INVALIDBLOCKMESHOUTBOX" code="20" description="invalid Block Mesh Outbox" />
		<error name="CASEDEFINITIONNOTINITIALIZED" code="21" description="Case definition not initialized" />
		<error name="MISSINGSURFACEIDENTIFIER" code="22" description="Missing surface identifier" />
		<error name="MISSINGSURFACEUUID" code="23" description="Missing surface UUID" />
		<error name="INVALIDSURFACEIDENTIFIER" code="24" description="Invalid surface identifier" />
		<error name="INVALIDSURFACEUUID" code="25" description="Invalid surface identifier" />
		<error name="MISSINGSURFACETYPE" code="26" description="Missing surface type" />
		<error name="INVALIDSURFACEGROUP" code="27" description="Invalid surface group" />		
		<error name="INVALIDSURFACETYPE" code="28" description="Invalid surface type" />		
		<error name="INVALIDOPENFOAMDEFINITION" code="29" description="Invalid OpenFOAM Definition" />		
		<error name="DUPLICATEOPENFOAMSURFACE" code="30" description="Duplicate OpenFOAM Surface" />		
		<error name="OPENFOAMDEFINITIONMISSINGINBUILD" code="31" description="OpenFOAM Definition missing in build." />		
		<error name="INVALIDKEYCHARLENGTH" code="32" description="Invalid key char length" />					
		<error name="OPENFOAMDOMAINMUSTBECONNECTED" code="33" description="OpenFOAM Domain must be connected." />					
		<error name="SURFACESTLNOTFOUND" code="34" description="Surface STL not found." />					
		
		
		
		
	
	</errors>

<!--

This base Driver interface MUST be in Sync with LibMCDriver.xml

-->

	
	<class name="Base">
	</class>
	
	


	
	<class name="Driver" parent="Base" description="An abstract Machine Control Driver">

		<method name="Configure" description = "Configures a driver with its specific configuration data.">
			<param name="ConfigurationString" type="string" pass="in" description="Configuration data of driver." />
		</method>
	
		<method name="GetName" description = "returns the name identifier of the driver">
			<param name="Name" type="string" pass="return" description="Name of the driver." />
		</method>

		<method name="GetType" description = "returns the type identifier of the driver">
			<param name="Type" type="string" pass="return" description="Type of the driver." />
		</method>

		<method name="GetVersion" description = "returns the version identifiers of the driver">
			<param name="Major" type="uint32" pass="out" description="Major version." />
			<param name="Minor" type="uint32" pass="out" description="Minor version." />
			<param name="Micro" type="uint32" pass="out" description="Micro version." />
			<param name="Build" type="string" pass="out" description="Build identifier." />
		</method>
		
		<method name="QueryParameters" description = "Updates the driver parameters in the driver environment. Should only be called in the driver thread.">
		</method>

		<method name="QueryParametersEx" description = "Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.">
			<param name="DriverUpdateInstance" type="class" class="LibMCEnv:DriverStatusUpdateSession" pass="in" description="Status update instance." />
		</method>
	
	</class>

<!--

End Interface

-->


<!--

Custom implementation

-->


	<enum name="CaseStatus">
	   <option name="Invalid" value="0" />
	   <option name="InPreparation" value="1" />
	   <option name="Running" value="2" />
	   <option name="Success" value="3" />
	   <option name="Failure" value="4" />
	</enum>


	<class name="OpenFOAMCase" parent="Base" description="A base class for running an OpenFoam case.">

		<method name="GetIdentifier" description="Returns the identifier of the case.">
			<param name="Identifier" type="string" pass="return" description="Identifier string." />
		</method>
	
		<method name="CanRun" description="Returns if all prerequisites of the case have been set up and the case is not running yet.">
			<param name="CanRunFlag" type="bool" pass="return" description="Returns true if the case can run, false if it can not." />
		</method>

		<method name="GetStatus" description="Returns the current case status.">
			<param name="Status" type="enum" class="CaseStatus" pass="return" description="Returns the status variable." />
		</method>

		<method name="IsRunning" description="Returns if the case is running in the background.">
			<param name="IsRunningFlag" type="bool" pass="return" description="Returns true if the case is currently running, false if is not running." />
		</method>

		<method name="IsSuccessful" description="Returns if the case has finished successfully.">
			<param name="IsSuccessfulFlag" type="bool" pass="return" description="Returns true if the case has been computed successfully, false otherwise." />
		</method>

		<method name="IsInError" description="Returns if the case has finished with an error.">
			<param name="IsErrorFlag" type="bool" pass="return" description="Returns true if the case has not been able to finish successfully, false otherwise. If the case has not been started, also false is returned." />
		</method>

		<method name="SetBuild" description="Sets the simulation setup build.">
			<param name="Build" type="class" class="LibMCEnv:Build" pass="in" description="Build instance to use." />
		</method>

		<method name="HasBuild" description="Has a build job associated with the case.">
			<param name="HasBuild" type="bool" pass="return" description="Returns true, if the case has an associated build job." />
		</method>

		<method name="GetBuildUUID" description="Returns UUID of the build.">
			<param name="BuildUUID" type="string" pass="return" description="Build job UUID." />
		</method>

		<method name="StartComputation" description="Starts the computation. Fails if CanRun would return false.">
		</method>
		
		<method name="CreateOpenFOAMInputDeck" description="Writes the OpenFOAM input deck into a ZIP file">
			<param name="ZIPStream" type="class" class="LibMCEnv:ZIPStreamWriter" pass="in" description="ZIP Stream writer to add the input deck to." />
		</method>


	</class>


	<class name="Driver_OpenFOAM" parent="Driver" description="A Driver for the OpenFOAM CFD Solver library.">
		
		<method name="CreateCase" description="Creates an open foam case. Fails if a case with the same identifier already exists.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the case. MUST be an alphanumeric string with _ allowed. MUST not exceed 128 characters." />
			<param name="CaseInstance" type="class" class="OpenFOAMCase" pass="return" description="FOAM Case instance." />
		</method>

		<method name="CaseExists" description="Checks if a case of a certain identifier exists.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the case. MUST be an alphanumeric string with _ allowed. MUST not exceed 128 characters." />
			<param name="CaseDoesExist" type="bool" pass="return" description="Returns true, if the case exists, false otherwise." />
		</method>

		<method name="FindCase" description="Finds a case by a certain identifier. Fails if the case does not exist.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the case. MUST be an alphanumeric string with _ allowed. MUST not exceed 128 characters." />
			<param name="CaseInstance" type="class" class="OpenFOAMCase" pass="return" description="FOAM Case instance." />
		</method>
		
		<method name="ReleaseCase" description="Releases the case, frees all of its references and memory and removes the working directory from disk. Cancels any ongoing computation. Does nothing, if case does not exist.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the case. MUST be an alphanumeric string with _ allowed. MUST not exceed 128 characters." />
		</method>
		
	</class>




<!--

End of Custom implementation

-->

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" injectionmethod="InjectComponent" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="InjectComponent" description="Injects an imported component for usage within this component">
			<param name="NameSpace" type="string" pass="in" description="NameSpace of the injected component" />
			<param name="SymbolAddressMethod" type="pointer" pass="in" description="Address of the SymbolAddressMethod of the injected component" />
		</method>		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>				
		<method name="CreateDriver" description="Creates a driver instance with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of driver to be created." />
			<param name="Type" type="string" pass="in" description="Type of driver to be created." />
			<param name="DriverEnvironment" type="class" class="LibMCEnv:DriverEnvironment" pass="in" description="Environment of this driver." />
			<param name="Instance" type="optionalclass" class="Driver" pass="return" description="New Driver instance" />
		</method>
		
	</global>
	
	
</component>


