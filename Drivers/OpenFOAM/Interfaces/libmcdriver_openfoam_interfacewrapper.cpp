/*++

Copyright (C) 2025 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver for the OpenFOAM CFD Solver. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_openfoam_abi.hpp"
#include "libmcdriver_openfoam_interfaces.hpp"
#include "libmcdriver_openfoam_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_OpenFOAM::Impl;

LibMCDriver_OpenFOAMResult handleLibMCDriver_OpenFOAMException(IBase * pIBaseClass, ELibMCDriver_OpenFOAMInterfaceException & Exception)
{
	LibMCDriver_OpenFOAMResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_OpenFOAMResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_OpenFOAMResult errorCode = LIBMCDRIVER_OPENFOAM_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_OpenFOAMResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_OpenFOAMResult errorCode = LIBMCDRIVER_OPENFOAM_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_configure(LibMCDriver_OpenFOAM_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_getname(LibMCDriver_OpenFOAM_Driver pDriver, const LibMCDriver_OpenFOAM_uint32 nNameBufferSize, LibMCDriver_OpenFOAM_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_OpenFOAM_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_gettype(LibMCDriver_OpenFOAM_Driver pDriver, const LibMCDriver_OpenFOAM_uint32 nTypeBufferSize, LibMCDriver_OpenFOAM_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_OpenFOAM_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_getversion(LibMCDriver_OpenFOAM_Driver pDriver, LibMCDriver_OpenFOAM_uint32 * pMajor, LibMCDriver_OpenFOAM_uint32 * pMinor, LibMCDriver_OpenFOAM_uint32 * pMicro, const LibMCDriver_OpenFOAM_uint32 nBuildBufferSize, LibMCDriver_OpenFOAM_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_OpenFOAM_uint32, LibMCDriver_OpenFOAM_uint32, LibMCDriver_OpenFOAM_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_OpenFOAM_uint32, LibMCDriver_OpenFOAM_uint32, LibMCDriver_OpenFOAM_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_OpenFOAM_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_queryparameters(LibMCDriver_OpenFOAM_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_queryparametersex(LibMCDriver_OpenFOAM_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for OpenFOAMCase
**************************************************************************************************************************/
LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_getidentifier(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, const LibMCDriver_OpenFOAM_uint32 nIdentifierBufferSize, LibMCDriver_OpenFOAM_uint32* pIdentifierNeededChars, char * pIdentifierBuffer)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		if ( (!pIdentifierBuffer) && !(pIdentifierNeededChars) )
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sIdentifier("");
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pIdentifierBuffer == nullptr);
		if (isCacheCall) {
			sIdentifier = pIOpenFOAMCase->GetIdentifier();

			pIOpenFOAMCase->_setCache (new ParameterCache_1<std::string> (sIdentifier));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIOpenFOAMCase->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
			cache->retrieveData (sIdentifier);
			pIOpenFOAMCase->_setCache (nullptr);
		}
		
		if (pIdentifierNeededChars)
			*pIdentifierNeededChars = (LibMCDriver_OpenFOAM_uint32) (sIdentifier.size()+1);
		if (pIdentifierBuffer) {
			if (sIdentifier.size() >= nIdentifierBufferSize)
				throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_BUFFERTOOSMALL);
			for (size_t iIdentifier = 0; iIdentifier < sIdentifier.size(); iIdentifier++)
				pIdentifierBuffer[iIdentifier] = sIdentifier[iIdentifier];
			pIdentifierBuffer[sIdentifier.size()] = 0;
		}
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_canrun(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pCanRunFlag)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		if (pCanRunFlag == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		*pCanRunFlag = pIOpenFOAMCase->CanRun();

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_getstatus(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, eLibMCDriver_OpenFOAMCaseStatus * pStatus)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		if (pStatus == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		*pStatus = pIOpenFOAMCase->GetStatus();

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_isrunning(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pIsRunningFlag)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		if (pIsRunningFlag == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		*pIsRunningFlag = pIOpenFOAMCase->IsRunning();

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_issuccessful(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pIsSuccessfulFlag)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		if (pIsSuccessfulFlag == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		*pIsSuccessfulFlag = pIOpenFOAMCase->IsSuccessful();

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_isinerror(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pIsErrorFlag)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		if (pIsErrorFlag == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		*pIsErrorFlag = pIOpenFOAMCase->IsInError();

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_setbuild(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, LibMCEnv_Build pBuild)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		LibMCEnv::PBuild pIBuild = std::make_shared<LibMCEnv::CBuild>(CWrapper::sPLibMCEnvWrapper.get(), pBuild);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIBuild.get());
		if (!pIBuild)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		pIOpenFOAMCase->SetBuild(pIBuild);

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_hasbuild(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pHasBuild)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		if (pHasBuild == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		*pHasBuild = pIOpenFOAMCase->HasBuild();

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_getbuilduuid(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, const LibMCDriver_OpenFOAM_uint32 nBuildUUIDBufferSize, LibMCDriver_OpenFOAM_uint32* pBuildUUIDNeededChars, char * pBuildUUIDBuffer)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		if ( (!pBuildUUIDBuffer) && !(pBuildUUIDNeededChars) )
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sBuildUUID("");
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildUUIDBuffer == nullptr);
		if (isCacheCall) {
			sBuildUUID = pIOpenFOAMCase->GetBuildUUID();

			pIOpenFOAMCase->_setCache (new ParameterCache_1<std::string> (sBuildUUID));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIOpenFOAMCase->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
			cache->retrieveData (sBuildUUID);
			pIOpenFOAMCase->_setCache (nullptr);
		}
		
		if (pBuildUUIDNeededChars)
			*pBuildUUIDNeededChars = (LibMCDriver_OpenFOAM_uint32) (sBuildUUID.size()+1);
		if (pBuildUUIDBuffer) {
			if (sBuildUUID.size() >= nBuildUUIDBufferSize)
				throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_BUFFERTOOSMALL);
			for (size_t iBuildUUID = 0; iBuildUUID < sBuildUUID.size(); iBuildUUID++)
				pBuildUUIDBuffer[iBuildUUID] = sBuildUUID[iBuildUUID];
			pBuildUUIDBuffer[sBuildUUID.size()] = 0;
		}
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_startcomputation(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		pIOpenFOAMCase->StartComputation();

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_createopenfoaminputdeck(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, LibMCEnv_ZIPStreamWriter pZIPStream)
{
	IBase* pIBaseClass = (IBase *)pOpenFOAMCase;

	try {
		LibMCEnv::PZIPStreamWriter pIZIPStream = std::make_shared<LibMCEnv::CZIPStreamWriter>(CWrapper::sPLibMCEnvWrapper.get(), pZIPStream);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIZIPStream.get());
		if (!pIZIPStream)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		IOpenFOAMCase* pIOpenFOAMCase = dynamic_cast<IOpenFOAMCase*>(pIBaseClass);
		if (!pIOpenFOAMCase)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		pIOpenFOAMCase->CreateOpenFOAMInputDeck(pIZIPStream);

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_OpenFOAM
**************************************************************************************************************************/
LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_openfoam_createcase(LibMCDriver_OpenFOAM_Driver_OpenFOAM pDriver_OpenFOAM, const char * pIdentifier, LibMCDriver_OpenFOAM_OpenFOAMCase * pCaseInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_OpenFOAM;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (pCaseInstance == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IBase* pBaseCaseInstance(nullptr);
		IDriver_OpenFOAM* pIDriver_OpenFOAM = dynamic_cast<IDriver_OpenFOAM*>(pIBaseClass);
		if (!pIDriver_OpenFOAM)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		pBaseCaseInstance = pIDriver_OpenFOAM->CreateCase(sIdentifier);

		*pCaseInstance = (IBase*)(pBaseCaseInstance);
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_openfoam_caseexists(LibMCDriver_OpenFOAM_Driver_OpenFOAM pDriver_OpenFOAM, const char * pIdentifier, bool * pCaseDoesExist)
{
	IBase* pIBaseClass = (IBase *)pDriver_OpenFOAM;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (pCaseDoesExist == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IDriver_OpenFOAM* pIDriver_OpenFOAM = dynamic_cast<IDriver_OpenFOAM*>(pIBaseClass);
		if (!pIDriver_OpenFOAM)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		*pCaseDoesExist = pIDriver_OpenFOAM->CaseExists(sIdentifier);

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_openfoam_findcase(LibMCDriver_OpenFOAM_Driver_OpenFOAM pDriver_OpenFOAM, const char * pIdentifier, LibMCDriver_OpenFOAM_OpenFOAMCase * pCaseInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_OpenFOAM;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (pCaseInstance == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IBase* pBaseCaseInstance(nullptr);
		IDriver_OpenFOAM* pIDriver_OpenFOAM = dynamic_cast<IDriver_OpenFOAM*>(pIBaseClass);
		if (!pIDriver_OpenFOAM)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		pBaseCaseInstance = pIDriver_OpenFOAM->FindCase(sIdentifier);

		*pCaseInstance = (IBase*)(pBaseCaseInstance);
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_openfoam_releasecase(LibMCDriver_OpenFOAM_Driver_OpenFOAM pDriver_OpenFOAM, const char * pIdentifier)
{
	IBase* pIBaseClass = (IBase *)pDriver_OpenFOAM;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IDriver_OpenFOAM* pIDriver_OpenFOAM = dynamic_cast<IDriver_OpenFOAM*>(pIBaseClass);
		if (!pIDriver_OpenFOAM)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		pIDriver_OpenFOAM->ReleaseCase(sIdentifier);

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_OpenFOAMResult LibMCDriver_OpenFOAM::Impl::LibMCDriver_OpenFOAM_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_openfoam_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_configure;
	if (sProcName == "libmcdriver_openfoam_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_getname;
	if (sProcName == "libmcdriver_openfoam_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_gettype;
	if (sProcName == "libmcdriver_openfoam_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_getversion;
	if (sProcName == "libmcdriver_openfoam_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_queryparameters;
	if (sProcName == "libmcdriver_openfoam_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_queryparametersex;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_getidentifier") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_getidentifier;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_canrun") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_canrun;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_getstatus") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_getstatus;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_isrunning") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_isrunning;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_issuccessful") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_issuccessful;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_isinerror") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_isinerror;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_setbuild") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_setbuild;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_hasbuild") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_hasbuild;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_getbuilduuid") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_getbuilduuid;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_startcomputation") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_startcomputation;
	if (sProcName == "libmcdriver_openfoam_openfoamcase_createopenfoaminputdeck") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_openfoamcase_createopenfoaminputdeck;
	if (sProcName == "libmcdriver_openfoam_driver_openfoam_createcase") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_openfoam_createcase;
	if (sProcName == "libmcdriver_openfoam_driver_openfoam_caseexists") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_openfoam_caseexists;
	if (sProcName == "libmcdriver_openfoam_driver_openfoam_findcase") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_openfoam_findcase;
	if (sProcName == "libmcdriver_openfoam_driver_openfoam_releasecase") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_driver_openfoam_releasecase;
	if (sProcName == "libmcdriver_openfoam_getversion") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_getversion;
	if (sProcName == "libmcdriver_openfoam_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_getlasterror;
	if (sProcName == "libmcdriver_openfoam_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_releaseinstance;
	if (sProcName == "libmcdriver_openfoam_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_acquireinstance;
	if (sProcName == "libmcdriver_openfoam_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_injectcomponent;
	if (sProcName == "libmcdriver_openfoam_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_getsymbollookupmethod;
	if (sProcName == "libmcdriver_openfoam_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_openfoam_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_OPENFOAM_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_OpenFOAMResult libmcdriver_openfoam_getversion(LibMCDriver_OpenFOAM_uint32 * pMajor, LibMCDriver_OpenFOAM_uint32 * pMinor, LibMCDriver_OpenFOAM_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_getlasterror(LibMCDriver_OpenFOAM_Base pInstance, const LibMCDriver_OpenFOAM_uint32 nErrorMessageBufferSize, LibMCDriver_OpenFOAM_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_OpenFOAM_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_releaseinstance(LibMCDriver_OpenFOAM_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_acquireinstance(LibMCDriver_OpenFOAM_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_injectcomponent(const char * pNameSpace, LibMCDriver_OpenFOAM_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_OpenFOAMInterfaceException(LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_getsymbollookupmethod(LibMCDriver_OpenFOAM_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_OpenFOAM::Impl::LibMCDriver_OpenFOAM_GetProcAddress;
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenFOAMResult libmcdriver_openfoam_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_OpenFOAM_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_OpenFOAMInterfaceException (LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_OPENFOAM_SUCCESS;
	}
	catch (ELibMCDriver_OpenFOAMInterfaceException & Exception) {
		return handleLibMCDriver_OpenFOAMException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


