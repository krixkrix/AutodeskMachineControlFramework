/*++

Copyright (C) 2025 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver for the OpenFOAM CFD Solver

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_OPENFOAM_HEADER_CPP
#define __LIBMCDRIVER_OPENFOAM_HEADER_CPP

#ifdef __LIBMCDRIVER_OPENFOAM_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_OPENFOAM_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_OPENFOAM_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_OPENFOAM_EXPORTS
#define LIBMCDRIVER_OPENFOAM_DECLSPEC
#endif // __LIBMCDRIVER_OPENFOAM_EXPORTS

#include "libmcdriver_openfoam_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_configure(LibMCDriver_OpenFOAM_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_getname(LibMCDriver_OpenFOAM_Driver pDriver, const LibMCDriver_OpenFOAM_uint32 nNameBufferSize, LibMCDriver_OpenFOAM_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_gettype(LibMCDriver_OpenFOAM_Driver pDriver, const LibMCDriver_OpenFOAM_uint32 nTypeBufferSize, LibMCDriver_OpenFOAM_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_getversion(LibMCDriver_OpenFOAM_Driver pDriver, LibMCDriver_OpenFOAM_uint32 * pMajor, LibMCDriver_OpenFOAM_uint32 * pMinor, LibMCDriver_OpenFOAM_uint32 * pMicro, const LibMCDriver_OpenFOAM_uint32 nBuildBufferSize, LibMCDriver_OpenFOAM_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_queryparameters(LibMCDriver_OpenFOAM_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_queryparametersex(LibMCDriver_OpenFOAM_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for OpenFOAMCase
**************************************************************************************************************************/

/**
* Returns the identifier of the case.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[in] nIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIdentifierBuffer -  buffer of Identifier string., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_getidentifier(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, const LibMCDriver_OpenFOAM_uint32 nIdentifierBufferSize, LibMCDriver_OpenFOAM_uint32* pIdentifierNeededChars, char * pIdentifierBuffer);

/**
* Returns if all prerequisites of the case have been set up and the case is not running yet.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[out] pCanRunFlag - Returns true if the case can run, false if it can not.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_canrun(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pCanRunFlag);

/**
* Returns the current case status.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[out] pStatus - Returns the status variable.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_getstatus(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, LibMCDriver_OpenFOAM::eCaseStatus * pStatus);

/**
* Returns if the case is running in the background.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[out] pIsRunningFlag - Returns true if the case is currently running, false if is not running.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_isrunning(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pIsRunningFlag);

/**
* Returns if the case has finished successfully.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[out] pIsSuccessfulFlag - Returns true if the case has been computed successfully, false otherwise.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_issuccessful(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pIsSuccessfulFlag);

/**
* Returns if the case has finished with an error.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[out] pIsErrorFlag - Returns true if the case has not been able to finish successfully, false otherwise. If the case has not been started, also false is returned.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_isinerror(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pIsErrorFlag);

/**
* Sets the simulation setup build.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[in] pBuild - Build instance to use.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_setbuild(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, LibMCEnv_Build pBuild);

/**
* Has a build job associated with the case.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[out] pHasBuild - Returns true, if the case has an associated build job.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_hasbuild(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, bool * pHasBuild);

/**
* Returns UUID of the build.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[in] nBuildUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildUUIDBuffer -  buffer of Build job UUID., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_getbuilduuid(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, const LibMCDriver_OpenFOAM_uint32 nBuildUUIDBufferSize, LibMCDriver_OpenFOAM_uint32* pBuildUUIDNeededChars, char * pBuildUUIDBuffer);

/**
* Starts the computation. Fails if CanRun would return false.
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_startcomputation(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase);

/**
* Writes the OpenFOAM input deck into a ZIP file
*
* @param[in] pOpenFOAMCase - OpenFOAMCase instance.
* @param[in] pZIPStream - ZIP Stream writer to add the input deck to.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_openfoamcase_createopenfoaminputdeck(LibMCDriver_OpenFOAM_OpenFOAMCase pOpenFOAMCase, LibMCEnv_ZIPStreamWriter pZIPStream);

/*************************************************************************************************************************
 Class definition for Driver_OpenFOAM
**************************************************************************************************************************/

/**
* Creates an open foam case. Fails if a case with the same identifier already exists.
*
* @param[in] pDriver_OpenFOAM - Driver_OpenFOAM instance.
* @param[in] pIdentifier - Identifier of the case. MUST be an alphanumeric string with _ allowed. MUST not exceed 128 characters.
* @param[out] pCaseInstance - FOAM Case instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_openfoam_createcase(LibMCDriver_OpenFOAM_Driver_OpenFOAM pDriver_OpenFOAM, const char * pIdentifier, LibMCDriver_OpenFOAM_OpenFOAMCase * pCaseInstance);

/**
* Checks if a case of a certain identifier exists.
*
* @param[in] pDriver_OpenFOAM - Driver_OpenFOAM instance.
* @param[in] pIdentifier - Identifier of the case. MUST be an alphanumeric string with _ allowed. MUST not exceed 128 characters.
* @param[out] pCaseDoesExist - Returns true, if the case exists, false otherwise.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_openfoam_caseexists(LibMCDriver_OpenFOAM_Driver_OpenFOAM pDriver_OpenFOAM, const char * pIdentifier, bool * pCaseDoesExist);

/**
* Finds a case by a certain identifier. Fails if the case does not exist.
*
* @param[in] pDriver_OpenFOAM - Driver_OpenFOAM instance.
* @param[in] pIdentifier - Identifier of the case. MUST be an alphanumeric string with _ allowed. MUST not exceed 128 characters.
* @param[out] pCaseInstance - FOAM Case instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_openfoam_findcase(LibMCDriver_OpenFOAM_Driver_OpenFOAM pDriver_OpenFOAM, const char * pIdentifier, LibMCDriver_OpenFOAM_OpenFOAMCase * pCaseInstance);

/**
* Releases the case, frees all of its references and memory and removes the working directory from disk. Cancels any ongoing computation. Does nothing, if case does not exist.
*
* @param[in] pDriver_OpenFOAM - Driver_OpenFOAM instance.
* @param[in] pIdentifier - Identifier of the case. MUST be an alphanumeric string with _ allowed. MUST not exceed 128 characters.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_driver_openfoam_releasecase(LibMCDriver_OpenFOAM_Driver_OpenFOAM pDriver_OpenFOAM, const char * pIdentifier);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_getversion(LibMCDriver_OpenFOAM_uint32 * pMajor, LibMCDriver_OpenFOAM_uint32 * pMinor, LibMCDriver_OpenFOAM_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_getlasterror(LibMCDriver_OpenFOAM_Base pInstance, const LibMCDriver_OpenFOAM_uint32 nErrorMessageBufferSize, LibMCDriver_OpenFOAM_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_releaseinstance(LibMCDriver_OpenFOAM_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_acquireinstance(LibMCDriver_OpenFOAM_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_injectcomponent(const char * pNameSpace, LibMCDriver_OpenFOAM_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_getsymbollookupmethod(LibMCDriver_OpenFOAM_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPENFOAM_DECLSPEC LibMCDriver_OpenFOAMResult libmcdriver_openfoam_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_OpenFOAM_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_OPENFOAM_HEADER_CPP

