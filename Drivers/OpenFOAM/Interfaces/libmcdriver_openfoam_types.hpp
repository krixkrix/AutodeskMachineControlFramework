/*++

Copyright (C) 2025 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver for the OpenFOAM CFD Solver

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_OPENFOAM_TYPES_HEADER_CPP
#define __LIBMCDRIVER_OPENFOAM_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_OPENFOAM_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_OpenFOAM_uint8;
typedef unsigned short LibMCDriver_OpenFOAM_uint16 ;
typedef unsigned int LibMCDriver_OpenFOAM_uint32;
typedef unsigned long long LibMCDriver_OpenFOAM_uint64;
typedef char LibMCDriver_OpenFOAM_int8;
typedef short LibMCDriver_OpenFOAM_int16;
typedef int LibMCDriver_OpenFOAM_int32;
typedef long long LibMCDriver_OpenFOAM_int64;

#else // LIBMCDRIVER_OPENFOAM_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_OpenFOAM_uint8;
typedef uint16_t LibMCDriver_OpenFOAM_uint16;
typedef uint32_t LibMCDriver_OpenFOAM_uint32;
typedef uint64_t LibMCDriver_OpenFOAM_uint64;
typedef int8_t LibMCDriver_OpenFOAM_int8;
typedef int16_t LibMCDriver_OpenFOAM_int16;
typedef int32_t LibMCDriver_OpenFOAM_int32;
typedef int64_t LibMCDriver_OpenFOAM_int64 ;

#endif // LIBMCDRIVER_OPENFOAM_USELEGACYINTEGERTYPES

typedef float LibMCDriver_OpenFOAM_single;
typedef double LibMCDriver_OpenFOAM_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_OpenFOAM_int32 LibMCDriver_OpenFOAMResult;
typedef void * LibMCDriver_OpenFOAMHandle;
typedef void * LibMCDriver_OpenFOAM_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_OpenFOAM
**************************************************************************************************************************/

#define LIBMCDRIVER_OPENFOAM_VERSION_MAJOR 2
#define LIBMCDRIVER_OPENFOAM_VERSION_MINOR 0
#define LIBMCDRIVER_OPENFOAM_VERSION_MICRO 0
#define LIBMCDRIVER_OPENFOAM_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_OPENFOAM_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_OpenFOAM
**************************************************************************************************************************/

#define LIBMCDRIVER_OPENFOAM_SUCCESS 0
#define LIBMCDRIVER_OPENFOAM_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_OPENFOAM_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_OPENFOAM_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_OPENFOAM_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_OPENFOAM_ERROR_UNKNOWNIMAGEWRITEFORMAT 9 /** unknown image write format */
#define LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTWRITEIMAGETODISK 10 /** could not write image to disk */
#define LIBMCDRIVER_OPENFOAM_ERROR_EMPTYFILENAME 11 /** empty file name */
#define LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTCONVERTFILENAME 12 /** could not convert filename */
#define LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTGETSHORTPATHNAME 13 /** could not get short path name */
#define LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTCONVERTSHORTFILENAME 14 /** could not convert short path name */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCASEIDENTIFIER 15 /** invalid case identifier */
#define LIBMCDRIVER_OPENFOAM_ERROR_CASEIDENTIFIERNOTFOUND 16 /** case identifier not found */
#define LIBMCDRIVER_OPENFOAM_ERROR_CASEIDENTIFIERALREADYEXISTS 17 /** case identifier already exists */
#define LIBMCDRIVER_OPENFOAM_ERROR_CANNOTRUNOPENFOAMCASE 18 /** can not run OpenFOAM case */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDOPENFOAMVERSION 19 /** invalid OpenFOAM Version */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDBLOCKMESHOUTBOX 20 /** invalid Block Mesh Outbox */
#define LIBMCDRIVER_OPENFOAM_ERROR_CASEDEFINITIONNOTINITIALIZED 21 /** Case definition not initialized */
#define LIBMCDRIVER_OPENFOAM_ERROR_MISSINGSURFACEIDENTIFIER 22 /** Missing surface identifier */
#define LIBMCDRIVER_OPENFOAM_ERROR_MISSINGSURFACEUUID 23 /** Missing surface UUID */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDSURFACEIDENTIFIER 24 /** Invalid surface identifier */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDSURFACEUUID 25 /** Invalid surface identifier */
#define LIBMCDRIVER_OPENFOAM_ERROR_MISSINGSURFACETYPE 26 /** Missing surface type */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDSURFACEGROUP 27 /** Invalid surface group */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDSURFACETYPE 28 /** Invalid surface type */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDOPENFOAMDEFINITION 29 /** Invalid OpenFOAM Definition */
#define LIBMCDRIVER_OPENFOAM_ERROR_DUPLICATEOPENFOAMSURFACE 30 /** Duplicate OpenFOAM Surface */
#define LIBMCDRIVER_OPENFOAM_ERROR_OPENFOAMDEFINITIONMISSINGINBUILD 31 /** OpenFOAM Definition missing in build. */
#define LIBMCDRIVER_OPENFOAM_ERROR_INVALIDKEYCHARLENGTH 32 /** Invalid key char length */
#define LIBMCDRIVER_OPENFOAM_ERROR_OPENFOAMDOMAINMUSTBECONNECTED 33 /** OpenFOAM Domain must be connected. */
#define LIBMCDRIVER_OPENFOAM_ERROR_SURFACESTLNOTFOUND 34 /** Surface STL not found. */

/*************************************************************************************************************************
 Error strings for LibMCDriver_OpenFOAM
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_OPENFOAM_GETERRORSTRING (LibMCDriver_OpenFOAMResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_OPENFOAM_SUCCESS: return "no error";
    case LIBMCDRIVER_OPENFOAM_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_OPENFOAM_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_OPENFOAM_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_OPENFOAM_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_OPENFOAM_ERROR_UNKNOWNIMAGEWRITEFORMAT: return "unknown image write format";
    case LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTWRITEIMAGETODISK: return "could not write image to disk";
    case LIBMCDRIVER_OPENFOAM_ERROR_EMPTYFILENAME: return "empty file name";
    case LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTCONVERTFILENAME: return "could not convert filename";
    case LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTGETSHORTPATHNAME: return "could not get short path name";
    case LIBMCDRIVER_OPENFOAM_ERROR_COULDNOTCONVERTSHORTFILENAME: return "could not convert short path name";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDCASEIDENTIFIER: return "invalid case identifier";
    case LIBMCDRIVER_OPENFOAM_ERROR_CASEIDENTIFIERNOTFOUND: return "case identifier not found";
    case LIBMCDRIVER_OPENFOAM_ERROR_CASEIDENTIFIERALREADYEXISTS: return "case identifier already exists";
    case LIBMCDRIVER_OPENFOAM_ERROR_CANNOTRUNOPENFOAMCASE: return "can not run OpenFOAM case";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDOPENFOAMVERSION: return "invalid OpenFOAM Version";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDBLOCKMESHOUTBOX: return "invalid Block Mesh Outbox";
    case LIBMCDRIVER_OPENFOAM_ERROR_CASEDEFINITIONNOTINITIALIZED: return "Case definition not initialized";
    case LIBMCDRIVER_OPENFOAM_ERROR_MISSINGSURFACEIDENTIFIER: return "Missing surface identifier";
    case LIBMCDRIVER_OPENFOAM_ERROR_MISSINGSURFACEUUID: return "Missing surface UUID";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDSURFACEIDENTIFIER: return "Invalid surface identifier";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDSURFACEUUID: return "Invalid surface identifier";
    case LIBMCDRIVER_OPENFOAM_ERROR_MISSINGSURFACETYPE: return "Missing surface type";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDSURFACEGROUP: return "Invalid surface group";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDSURFACETYPE: return "Invalid surface type";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDOPENFOAMDEFINITION: return "Invalid OpenFOAM Definition";
    case LIBMCDRIVER_OPENFOAM_ERROR_DUPLICATEOPENFOAMSURFACE: return "Duplicate OpenFOAM Surface";
    case LIBMCDRIVER_OPENFOAM_ERROR_OPENFOAMDEFINITIONMISSINGINBUILD: return "OpenFOAM Definition missing in build.";
    case LIBMCDRIVER_OPENFOAM_ERROR_INVALIDKEYCHARLENGTH: return "Invalid key char length";
    case LIBMCDRIVER_OPENFOAM_ERROR_OPENFOAMDOMAINMUSTBECONNECTED: return "OpenFOAM Domain must be connected.";
    case LIBMCDRIVER_OPENFOAM_ERROR_SURFACESTLNOTFOUND: return "Surface STL not found.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_OpenFOAMHandle LibMCDriver_OpenFOAM_Base;
typedef LibMCDriver_OpenFOAMHandle LibMCDriver_OpenFOAM_Driver;
typedef LibMCDriver_OpenFOAMHandle LibMCDriver_OpenFOAM_OpenFOAMCase;
typedef LibMCDriver_OpenFOAMHandle LibMCDriver_OpenFOAM_Driver_OpenFOAM;

namespace LibMCDriver_OpenFOAM {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eCaseStatus : LibMCDriver_OpenFOAM_int32 {
    Invalid = 0,
    InPreparation = 1,
    Running = 2,
    Success = 3,
    Failure = 4
  };
  
} // namespace LibMCDriver_OpenFOAM;

// define legacy C-names for enums, structs and function types
typedef LibMCDriver_OpenFOAM::eCaseStatus eLibMCDriver_OpenFOAMCaseStatus;

#endif // __LIBMCDRIVER_OPENFOAM_TYPES_HEADER_CPP
