/*++

Copyright (C) 2025 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver for OpenCV Computer Vision Library

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_OPENCV_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_OPENCV_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_opencv_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVDriver_ConfigurePtr) (LibMCDriver_OpenCV_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVDriver_GetNamePtr) (LibMCDriver_OpenCV_Driver pDriver, const LibMCDriver_OpenCV_uint32 nNameBufferSize, LibMCDriver_OpenCV_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVDriver_GetTypePtr) (LibMCDriver_OpenCV_Driver pDriver, const LibMCDriver_OpenCV_uint32 nTypeBufferSize, LibMCDriver_OpenCV_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVDriver_GetVersionPtr) (LibMCDriver_OpenCV_Driver pDriver, LibMCDriver_OpenCV_uint32 * pMajor, LibMCDriver_OpenCV_uint32 * pMinor, LibMCDriver_OpenCV_uint32 * pMicro, const LibMCDriver_OpenCV_uint32 nBuildBufferSize, LibMCDriver_OpenCV_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVDriver_QueryParametersPtr) (LibMCDriver_OpenCV_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVDriver_QueryParametersExPtr) (LibMCDriver_OpenCV_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for ImageSaveParameters
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for ImageBuffer
**************************************************************************************************************************/

/**
* Retrieves the image format of the encoded buffer.
*
* @param[in] pImageBuffer - ImageBuffer instance.
* @param[out] pImageFormat - Format to write to.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVImageBuffer_GetImageFormatPtr) (LibMCDriver_OpenCV_ImageBuffer pImageBuffer, LibMCDriver_OpenCV::eImageWriteFormat * pImageFormat);

/**
* Retrieves the size of the encoded buffer.
*
* @param[in] pImageBuffer - ImageBuffer instance.
* @param[out] pBufferSize - Size of the buffer.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVImageBuffer_GetSizePtr) (LibMCDriver_OpenCV_ImageBuffer pImageBuffer, LibMCDriver_OpenCV_uint64 * pBufferSize);

/**
* Retrieves the data of the encoded buffer.
*
* @param[in] pImageBuffer - ImageBuffer instance.
* @param[in] nMemoryArrayBufferSize - Number of elements in buffer
* @param[out] pMemoryArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pMemoryArrayBuffer - uint8  buffer of Array to write into.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVImageBuffer_GetDataPtr) (LibMCDriver_OpenCV_ImageBuffer pImageBuffer, const LibMCDriver_OpenCV_uint64 nMemoryArrayBufferSize, LibMCDriver_OpenCV_uint64* pMemoryArrayNeededCount, LibMCDriver_OpenCV_uint8 * pMemoryArrayBuffer);

/**
* Stores the data in a temporary file stream.
*
* @param[in] pImageBuffer - ImageBuffer instance.
* @param[in] pStream - Stream to store the data to.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVImageBuffer_StoreToStreamPtr) (LibMCDriver_OpenCV_ImageBuffer pImageBuffer, LibMCEnv_TempStreamWriter pStream);

/*************************************************************************************************************************
 Class definition for Mat
**************************************************************************************************************************/

/**
* Returns if the Mat instance is empty.
*
* @param[in] pMat - Mat instance.
* @param[out] pIsEmpty - Returns true if the Mat instance is empty. False otherwise.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVMat_EmptyPtr) (LibMCDriver_OpenCV_Mat pMat, bool * pIsEmpty);

/**
* Returns the number of columns.
*
* @param[in] pMat - Mat instance.
* @param[out] pNumberOfColumns - Returns the number of columns of the matrix.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVMat_ColsPtr) (LibMCDriver_OpenCV_Mat pMat, LibMCDriver_OpenCV_uint32 * pNumberOfColumns);

/**
* Returns the number of rows.
*
* @param[in] pMat - Mat instance.
* @param[out] pNumberOfRows - Returns the number of rows of the matrix.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVMat_RowsPtr) (LibMCDriver_OpenCV_Mat pMat, LibMCDriver_OpenCV_uint32 * pNumberOfRows);

/**
* Writes a matrix as image buffer.
*
* @param[in] pMat - Mat instance.
* @param[in] eWriteFormat - Format to write to.
* @param[in] pSaveParameters - Optional parameters for writing the image file.
* @param[out] pOutputBuffer - Returns an image buffer object.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVMat_EncodeImagePtr) (LibMCDriver_OpenCV_Mat pMat, LibMCDriver_OpenCV::eImageWriteFormat eWriteFormat, LibMCDriver_OpenCV_ImageSaveParameters pSaveParameters, LibMCDriver_OpenCV_ImageBuffer * pOutputBuffer);

/**
* Writes a matrix into a temporary file stream.
*
* @param[in] pMat - Mat instance.
* @param[in] eWriteFormat - Format to write to.
* @param[in] pSaveParameters - Optional parameters for writing the image file.
* @param[in] pStream - Stream to store the data to.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVMat_EncodeImageToStreamPtr) (LibMCDriver_OpenCV_Mat pMat, LibMCDriver_OpenCV::eImageWriteFormat eWriteFormat, LibMCDriver_OpenCV_ImageSaveParameters pSaveParameters, LibMCEnv_TempStreamWriter pStream);

/*************************************************************************************************************************
 Class definition for Driver_OpenCV
**************************************************************************************************************************/

/**
* Loads an image from a memory buffer.
*
* @param[in] pDriver_OpenCV - Driver_OpenCV instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint8 buffer of Image data to read from.
* @param[in] eReadFormat - Image format to output.
* @param[out] pMatInstance - Mat instance of the image that has been loaded.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVDriver_OpenCV_LoadImageFromBufferPtr) (LibMCDriver_OpenCV_Driver_OpenCV pDriver_OpenCV, LibMCDriver_OpenCV_uint64 nBufferBufferSize, const LibMCDriver_OpenCV_uint8 * pBufferBuffer, LibMCDriver_OpenCV::eImageReadFormat eReadFormat, LibMCDriver_OpenCV_Mat * pMatInstance);

/**
* Loads an image from a resource identifier.
*
* @param[in] pDriver_OpenCV - Driver_OpenCV instance.
* @param[in] pResourceIdentifier - Image resource to read from.
* @param[in] eReadFormat - Image format to output.
* @param[out] pMatInstance - Mat instance of the image that has been loaded.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVDriver_OpenCV_LoadImageFromResourcePtr) (LibMCDriver_OpenCV_Driver_OpenCV pDriver_OpenCV, const char * pResourceIdentifier, LibMCDriver_OpenCV::eImageReadFormat eReadFormat, LibMCDriver_OpenCV_Mat * pMatInstance);

/**
* Creates an empty image.
*
* @param[in] pDriver_OpenCV - Driver_OpenCV instance.
* @param[in] nColumnCount - Number of Column of the new image.
* @param[in] nRowCount - Number of Rows of the new image.
* @param[in] eReadFormat - Image format to output.
* @param[out] pMatInstance - Mat instance of the image that has been loaded.
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVDriver_OpenCV_CreateEmptyImagePtr) (LibMCDriver_OpenCV_Driver_OpenCV pDriver_OpenCV, LibMCDriver_OpenCV_uint32 nColumnCount, LibMCDriver_OpenCV_uint32 nRowCount, LibMCDriver_OpenCV::eImageReadFormat eReadFormat, LibMCDriver_OpenCV_Mat * pMatInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVGetVersionPtr) (LibMCDriver_OpenCV_uint32 * pMajor, LibMCDriver_OpenCV_uint32 * pMinor, LibMCDriver_OpenCV_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVGetLastErrorPtr) (LibMCDriver_OpenCV_Base pInstance, const LibMCDriver_OpenCV_uint32 nErrorMessageBufferSize, LibMCDriver_OpenCV_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVReleaseInstancePtr) (LibMCDriver_OpenCV_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVAcquireInstancePtr) (LibMCDriver_OpenCV_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVInjectComponentPtr) (const char * pNameSpace, LibMCDriver_OpenCV_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVGetSymbolLookupMethodPtr) (LibMCDriver_OpenCV_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_OpenCVResult (*PLibMCDriver_OpenCVCreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_OpenCV_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_OpenCVDriver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_OpenCVDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_OpenCVDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_OpenCVDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_OpenCVDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_OpenCVDriver_QueryParametersExPtr m_Driver_QueryParametersEx;
	PLibMCDriver_OpenCVImageBuffer_GetImageFormatPtr m_ImageBuffer_GetImageFormat;
	PLibMCDriver_OpenCVImageBuffer_GetSizePtr m_ImageBuffer_GetSize;
	PLibMCDriver_OpenCVImageBuffer_GetDataPtr m_ImageBuffer_GetData;
	PLibMCDriver_OpenCVImageBuffer_StoreToStreamPtr m_ImageBuffer_StoreToStream;
	PLibMCDriver_OpenCVMat_EmptyPtr m_Mat_Empty;
	PLibMCDriver_OpenCVMat_ColsPtr m_Mat_Cols;
	PLibMCDriver_OpenCVMat_RowsPtr m_Mat_Rows;
	PLibMCDriver_OpenCVMat_EncodeImagePtr m_Mat_EncodeImage;
	PLibMCDriver_OpenCVMat_EncodeImageToStreamPtr m_Mat_EncodeImageToStream;
	PLibMCDriver_OpenCVDriver_OpenCV_LoadImageFromBufferPtr m_Driver_OpenCV_LoadImageFromBuffer;
	PLibMCDriver_OpenCVDriver_OpenCV_LoadImageFromResourcePtr m_Driver_OpenCV_LoadImageFromResource;
	PLibMCDriver_OpenCVDriver_OpenCV_CreateEmptyImagePtr m_Driver_OpenCV_CreateEmptyImage;
	PLibMCDriver_OpenCVGetVersionPtr m_GetVersion;
	PLibMCDriver_OpenCVGetLastErrorPtr m_GetLastError;
	PLibMCDriver_OpenCVReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_OpenCVAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_OpenCVInjectComponentPtr m_InjectComponent;
	PLibMCDriver_OpenCVGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_OpenCVCreateDriverPtr m_CreateDriver;
} sLibMCDriver_OpenCVDynamicWrapperTable;

#endif // __LIBMCDRIVER_OPENCV_DYNAMICHEADER_CPPTYPES

