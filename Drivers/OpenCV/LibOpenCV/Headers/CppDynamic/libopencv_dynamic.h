/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Library Wrapper for OpenCV Computer Vision Library

Interface version: 1.2.0

*/

#ifndef __LIBOPENCV_DYNAMICHEADER_CPPTYPES
#define __LIBOPENCV_DYNAMICHEADER_CPPTYPES

#include "libopencv_types.hpp"



/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for ImageSaveParameters
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Mat
**************************************************************************************************************************/

/**
* Returns if the Mat instance is empty.
*
* @param[in] pMat - Mat instance.
* @param[out] pIsEmpty - Returns true if the Mat instance is empty. False otherwise.
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVMat_EmptyPtr) (LibOpenCV_Mat pMat, bool * pIsEmpty);

/**
* Returns the number of columns.
*
* @param[in] pMat - Mat instance.
* @param[out] pNumberOfColumns - Returns the number of columns of the matrix.
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVMat_ColsPtr) (LibOpenCV_Mat pMat, LibOpenCV_uint32 * pNumberOfColumns);

/**
* Returns the number of rows.
*
* @param[in] pMat - Mat instance.
* @param[out] pNumberOfRows - Returns the number of rows of the matrix.
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVMat_RowsPtr) (LibOpenCV_Mat pMat, LibOpenCV_uint32 * pNumberOfRows);

/**
* Writes a matrix as image to a file.
*
* @param[in] pMat - Mat instance.
* @param[in] pFileName - Filename to write to (in UTF8). File type is derived from the file extension.
* @param[in] pSaveParameters - Optional parameters for writing the image file.
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVMat_WriteToFilePtr) (LibOpenCV_Mat pMat, const char * pFileName, LibOpenCV_ImageSaveParameters pSaveParameters);

/*************************************************************************************************************************
 Class definition for OpenCVContext
**************************************************************************************************************************/

/**
* Loads an image from a file on disk.
*
* @param[in] pOpenCVContext - OpenCVContext instance.
* @param[in] pFileName - Filename to read (in UTF8).
* @param[in] eReadFormat - Image format to output.
* @param[out] pMatInstance - Mat instance of the image that has been loaded.
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVOpenCVContext_LoadImageFromFilePtr) (LibOpenCV_OpenCVContext pOpenCVContext, const char * pFileName, LibOpenCV::eImageReadFormat eReadFormat, LibOpenCV_Mat * pMatInstance);

/**
* Creates an empty image.
*
* @param[in] pOpenCVContext - OpenCVContext instance.
* @param[in] nColumnCount - Number of Column of the new image.
* @param[in] nRowCount - Number of Rows of the new image.
* @param[in] eReadFormat - Image format to output.
* @param[out] pMatInstance - Mat instance of the image that has been loaded.
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVOpenCVContext_CreateEmptyImagePtr) (LibOpenCV_OpenCVContext pOpenCVContext, LibOpenCV_uint32 nColumnCount, LibOpenCV_uint32 nRowCount, LibOpenCV::eImageReadFormat eReadFormat, LibOpenCV_Mat * pMatInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVGetVersionPtr) (LibOpenCV_uint32 * pMajor, LibOpenCV_uint32 * pMinor, LibOpenCV_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVGetLastErrorPtr) (LibOpenCV_Base pInstance, const LibOpenCV_uint32 nErrorMessageBufferSize, LibOpenCV_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Acquire shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVAcquireInstancePtr) (LibOpenCV_Base pInstance);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVReleaseInstancePtr) (LibOpenCV_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVGetSymbolLookupMethodPtr) (LibOpenCV_pvoid * pSymbolLookupMethod);

/**
* Creates an OpenCV Context
*
* @param[out] pContextInstance - OpenCVContext Instance
* @return error code or 0 (success)
*/
typedef LibOpenCVResult (*PLibOpenCVCreateContextPtr) (LibOpenCV_OpenCVContext * pContextInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibOpenCVMat_EmptyPtr m_Mat_Empty;
	PLibOpenCVMat_ColsPtr m_Mat_Cols;
	PLibOpenCVMat_RowsPtr m_Mat_Rows;
	PLibOpenCVMat_WriteToFilePtr m_Mat_WriteToFile;
	PLibOpenCVOpenCVContext_LoadImageFromFilePtr m_OpenCVContext_LoadImageFromFile;
	PLibOpenCVOpenCVContext_CreateEmptyImagePtr m_OpenCVContext_CreateEmptyImage;
	PLibOpenCVGetVersionPtr m_GetVersion;
	PLibOpenCVGetLastErrorPtr m_GetLastError;
	PLibOpenCVAcquireInstancePtr m_AcquireInstance;
	PLibOpenCVReleaseInstancePtr m_ReleaseInstance;
	PLibOpenCVGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibOpenCVCreateContextPtr m_CreateContext;
} sLibOpenCVDynamicWrapperTable;

#endif // __LIBOPENCV_DYNAMICHEADER_CPPTYPES

