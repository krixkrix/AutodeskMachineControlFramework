/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Library Wrapper for OpenCV Computer Vision Library

Interface version: 1.2.0

*/

#ifndef __LIBOPENCV_CPPHEADER_DYNAMIC_CPP
#define __LIBOPENCV_CPPHEADER_DYNAMIC_CPP

#include "libopencv_types.hpp"
#include "libopencv_dynamic.h"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibOpenCV {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CImageSaveParameters;
class CMat;
class COpenCVContext;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibOpenCVWrapper;
typedef CBase CLibOpenCVBase;
typedef CImageSaveParameters CLibOpenCVImageSaveParameters;
typedef CMat CLibOpenCVMat;
typedef COpenCVContext CLibOpenCVOpenCVContext;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CImageSaveParameters> PImageSaveParameters;
typedef std::shared_ptr<CMat> PMat;
typedef std::shared_ptr<COpenCVContext> POpenCVContext;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibOpenCVWrapper;
typedef PBase PLibOpenCVBase;
typedef PImageSaveParameters PLibOpenCVImageSaveParameters;
typedef PMat PLibOpenCVMat;
typedef POpenCVContext PLibOpenCVOpenCVContext;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibOpenCVHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibOpenCVException 
**************************************************************************************************************************/
class ELibOpenCVException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibOpenCVResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibOpenCVException(LibOpenCVResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibOpenCVResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBOPENCV_SUCCESS: return "SUCCESS";
			case LIBOPENCV_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBOPENCV_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBOPENCV_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBOPENCV_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBOPENCV_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBOPENCV_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBOPENCV_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBOPENCV_ERROR_INVALIDREADFORMAT: return "INVALIDREADFORMAT";
			case LIBOPENCV_ERROR_COULDNOTREADIMAGEFILE: return "COULDNOTREADIMAGEFILE";
			case LIBOPENCV_ERROR_COULDNOTCREATEEMPTYIMAGE: return "COULDNOTCREATEEMPTYIMAGE";
			case LIBOPENCV_ERROR_COULDNOTWRITEIMAGEFILE: return "COULDNOTWRITEIMAGEFILE";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBOPENCV_SUCCESS: return "success";
			case LIBOPENCV_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBOPENCV_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBOPENCV_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBOPENCV_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBOPENCV_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBOPENCV_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBOPENCV_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBOPENCV_ERROR_INVALIDREADFORMAT: return "Invalid read format";
			case LIBOPENCV_ERROR_COULDNOTREADIMAGEFILE: return "Could not read image file";
			case LIBOPENCV_ERROR_COULDNOTCREATEEMPTYIMAGE: return "Could not create empty image";
			case LIBOPENCV_ERROR_COULDNOTWRITEIMAGEFILE: return "Could not write image file";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibOpenCVInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibOpenCVResult nResult);

	inline void GetVersion(LibOpenCV_uint32 & nMajor, LibOpenCV_uint32 & nMinor, LibOpenCV_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline LibOpenCV_pvoid GetSymbolLookupMethod();
	inline POpenCVContext CreateContext();

private:
	sLibOpenCVDynamicWrapperTable m_WrapperTable;
	
	LibOpenCVResult checkBinaryVersion()
	{
		LibOpenCV_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBOPENCV_VERSION_MAJOR) || (nMinor < LIBOPENCV_VERSION_MINOR) ) {
			return LIBOPENCV_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBOPENCV_SUCCESS;
	}
	LibOpenCVResult initWrapperTable(sLibOpenCVDynamicWrapperTable * pWrapperTable);
	LibOpenCVResult releaseWrapperTable(sLibOpenCVDynamicWrapperTable * pWrapperTable);
	LibOpenCVResult loadWrapperTable(sLibOpenCVDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibOpenCVResult loadWrapperTableFromSymbolLookupMethod(sLibOpenCVDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CImageSaveParameters;
	friend class CMat;
	friend class COpenCVContext;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibOpenCVHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibOpenCVResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibOpenCVHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibOpenCVHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CImageSaveParameters 
**************************************************************************************************************************/
class CImageSaveParameters : public CBase {
public:
	
	/**
	* CImageSaveParameters::CImageSaveParameters - Constructor for ImageSaveParameters class.
	*/
	CImageSaveParameters(CWrapper* pWrapper, LibOpenCVHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
};
	
/*************************************************************************************************************************
 Class CMat 
**************************************************************************************************************************/
class CMat : public CBase {
public:
	
	/**
	* CMat::CMat - Constructor for Mat class.
	*/
	CMat(CWrapper* pWrapper, LibOpenCVHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool Empty();
	inline LibOpenCV_uint32 Cols();
	inline LibOpenCV_uint32 Rows();
	inline void WriteToFile(const std::string & sFileName, classParam<CImageSaveParameters> pSaveParameters);
};
	
/*************************************************************************************************************************
 Class COpenCVContext 
**************************************************************************************************************************/
class COpenCVContext : public CBase {
public:
	
	/**
	* COpenCVContext::COpenCVContext - Constructor for OpenCVContext class.
	*/
	COpenCVContext(CWrapper* pWrapper, LibOpenCVHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PMat LoadImageFromFile(const std::string & sFileName, const eImageReadFormat eReadFormat);
	inline PMat CreateEmptyImage(const LibOpenCV_uint32 nColumnCount, const LibOpenCV_uint32 nRowCount, const eImageReadFormat eReadFormat);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibOpenCV_uint32 & nMajor, LibOpenCV_uint32 & nMinor, LibOpenCV_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibOpenCVHandle hInstance = pInstance.GetHandle();
		LibOpenCV_uint32 bytesNeededErrorMessage = 0;
		LibOpenCV_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::AcquireInstance - Acquire shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibOpenCVHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibOpenCVHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibOpenCV_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibOpenCV_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateContext - Creates an OpenCV Context
	* @return OpenCVContext Instance
	*/
	inline POpenCVContext CWrapper::CreateContext()
	{
		LibOpenCVHandle hContextInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateContext(&hContextInstance));
		
		if (!hContextInstance) {
			CheckError(nullptr,LIBOPENCV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COpenCVContext>(this, hContextInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibOpenCVResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibOpenCVException(nResult, sErrorMessage);
		}
	}
	

	inline LibOpenCVResult CWrapper::initWrapperTable(sLibOpenCVDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBOPENCV_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Mat_Empty = nullptr;
		pWrapperTable->m_Mat_Cols = nullptr;
		pWrapperTable->m_Mat_Rows = nullptr;
		pWrapperTable->m_Mat_WriteToFile = nullptr;
		pWrapperTable->m_OpenCVContext_LoadImageFromFile = nullptr;
		pWrapperTable->m_OpenCVContext_CreateEmptyImage = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateContext = nullptr;
		
		return LIBOPENCV_SUCCESS;
	}

	inline LibOpenCVResult CWrapper::releaseWrapperTable(sLibOpenCVDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBOPENCV_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBOPENCV_SUCCESS;
	}

	inline LibOpenCVResult CWrapper::loadWrapperTable(sLibOpenCVDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBOPENCV_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBOPENCV_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBOPENCV_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBOPENCV_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBOPENCV_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Mat_Empty = (PLibOpenCVMat_EmptyPtr) GetProcAddress(hLibrary, "libopencv_mat_empty");
		#else // _WIN32
		pWrapperTable->m_Mat_Empty = (PLibOpenCVMat_EmptyPtr) dlsym(hLibrary, "libopencv_mat_empty");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Mat_Empty == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Mat_Cols = (PLibOpenCVMat_ColsPtr) GetProcAddress(hLibrary, "libopencv_mat_cols");
		#else // _WIN32
		pWrapperTable->m_Mat_Cols = (PLibOpenCVMat_ColsPtr) dlsym(hLibrary, "libopencv_mat_cols");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Mat_Cols == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Mat_Rows = (PLibOpenCVMat_RowsPtr) GetProcAddress(hLibrary, "libopencv_mat_rows");
		#else // _WIN32
		pWrapperTable->m_Mat_Rows = (PLibOpenCVMat_RowsPtr) dlsym(hLibrary, "libopencv_mat_rows");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Mat_Rows == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Mat_WriteToFile = (PLibOpenCVMat_WriteToFilePtr) GetProcAddress(hLibrary, "libopencv_mat_writetofile");
		#else // _WIN32
		pWrapperTable->m_Mat_WriteToFile = (PLibOpenCVMat_WriteToFilePtr) dlsym(hLibrary, "libopencv_mat_writetofile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Mat_WriteToFile == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OpenCVContext_LoadImageFromFile = (PLibOpenCVOpenCVContext_LoadImageFromFilePtr) GetProcAddress(hLibrary, "libopencv_opencvcontext_loadimagefromfile");
		#else // _WIN32
		pWrapperTable->m_OpenCVContext_LoadImageFromFile = (PLibOpenCVOpenCVContext_LoadImageFromFilePtr) dlsym(hLibrary, "libopencv_opencvcontext_loadimagefromfile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OpenCVContext_LoadImageFromFile == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OpenCVContext_CreateEmptyImage = (PLibOpenCVOpenCVContext_CreateEmptyImagePtr) GetProcAddress(hLibrary, "libopencv_opencvcontext_createemptyimage");
		#else // _WIN32
		pWrapperTable->m_OpenCVContext_CreateEmptyImage = (PLibOpenCVOpenCVContext_CreateEmptyImagePtr) dlsym(hLibrary, "libopencv_opencvcontext_createemptyimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OpenCVContext_CreateEmptyImage == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibOpenCVGetVersionPtr) GetProcAddress(hLibrary, "libopencv_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibOpenCVGetVersionPtr) dlsym(hLibrary, "libopencv_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibOpenCVGetLastErrorPtr) GetProcAddress(hLibrary, "libopencv_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibOpenCVGetLastErrorPtr) dlsym(hLibrary, "libopencv_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibOpenCVAcquireInstancePtr) GetProcAddress(hLibrary, "libopencv_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibOpenCVAcquireInstancePtr) dlsym(hLibrary, "libopencv_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibOpenCVReleaseInstancePtr) GetProcAddress(hLibrary, "libopencv_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibOpenCVReleaseInstancePtr) dlsym(hLibrary, "libopencv_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibOpenCVGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libopencv_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibOpenCVGetSymbolLookupMethodPtr) dlsym(hLibrary, "libopencv_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateContext = (PLibOpenCVCreateContextPtr) GetProcAddress(hLibrary, "libopencv_createcontext");
		#else // _WIN32
		pWrapperTable->m_CreateContext = (PLibOpenCVCreateContextPtr) dlsym(hLibrary, "libopencv_createcontext");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateContext == nullptr)
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBOPENCV_SUCCESS;
	}

	inline LibOpenCVResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibOpenCVDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBOPENCV_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBOPENCV_ERROR_INVALIDPARAM;
		
		typedef LibOpenCVResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibOpenCVResult eLookupError = LIBOPENCV_SUCCESS;
		eLookupError = (*pLookup)("libopencv_mat_empty", (void**)&(pWrapperTable->m_Mat_Empty));
		if ( (eLookupError != 0) || (pWrapperTable->m_Mat_Empty == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_mat_cols", (void**)&(pWrapperTable->m_Mat_Cols));
		if ( (eLookupError != 0) || (pWrapperTable->m_Mat_Cols == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_mat_rows", (void**)&(pWrapperTable->m_Mat_Rows));
		if ( (eLookupError != 0) || (pWrapperTable->m_Mat_Rows == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_mat_writetofile", (void**)&(pWrapperTable->m_Mat_WriteToFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_Mat_WriteToFile == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_opencvcontext_loadimagefromfile", (void**)&(pWrapperTable->m_OpenCVContext_LoadImageFromFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_OpenCVContext_LoadImageFromFile == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_opencvcontext_createemptyimage", (void**)&(pWrapperTable->m_OpenCVContext_CreateEmptyImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_OpenCVContext_CreateEmptyImage == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopencv_createcontext", (void**)&(pWrapperTable->m_CreateContext));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateContext == nullptr) )
			return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBOPENCV_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CImageSaveParameters
	 */
	
	/**
	 * Method definitions for class CMat
	 */
	
	/**
	* CMat::Empty - Returns if the Mat instance is empty.
	* @return Returns true if the Mat instance is empty. False otherwise.
	*/
	bool CMat::Empty()
	{
		bool resultIsEmpty = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Mat_Empty(m_pHandle, &resultIsEmpty));
		
		return resultIsEmpty;
	}
	
	/**
	* CMat::Cols - Returns the number of columns.
	* @return Returns the number of columns of the matrix.
	*/
	LibOpenCV_uint32 CMat::Cols()
	{
		LibOpenCV_uint32 resultNumberOfColumns = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Mat_Cols(m_pHandle, &resultNumberOfColumns));
		
		return resultNumberOfColumns;
	}
	
	/**
	* CMat::Rows - Returns the number of rows.
	* @return Returns the number of rows of the matrix.
	*/
	LibOpenCV_uint32 CMat::Rows()
	{
		LibOpenCV_uint32 resultNumberOfRows = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Mat_Rows(m_pHandle, &resultNumberOfRows));
		
		return resultNumberOfRows;
	}
	
	/**
	* CMat::WriteToFile - Writes a matrix as image to a file.
	* @param[in] sFileName - Filename to write to (in UTF8). File type is derived from the file extension.
	* @param[in] pSaveParameters - Optional parameters for writing the image file.
	*/
	void CMat::WriteToFile(const std::string & sFileName, classParam<CImageSaveParameters> pSaveParameters)
	{
		LibOpenCVHandle hSaveParameters = pSaveParameters.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Mat_WriteToFile(m_pHandle, sFileName.c_str(), hSaveParameters));
	}
	
	/**
	 * Method definitions for class COpenCVContext
	 */
	
	/**
	* COpenCVContext::LoadImageFromFile - Loads an image from a file on disk.
	* @param[in] sFileName - Filename to read (in UTF8).
	* @param[in] eReadFormat - Image format to output.
	* @return Mat instance of the image that has been loaded.
	*/
	PMat COpenCVContext::LoadImageFromFile(const std::string & sFileName, const eImageReadFormat eReadFormat)
	{
		LibOpenCVHandle hMatInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_OpenCVContext_LoadImageFromFile(m_pHandle, sFileName.c_str(), eReadFormat, &hMatInstance));
		
		if (!hMatInstance) {
			CheckError(LIBOPENCV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CMat>(m_pWrapper, hMatInstance);
	}
	
	/**
	* COpenCVContext::CreateEmptyImage - Creates an empty image.
	* @param[in] nColumnCount - Number of Column of the new image.
	* @param[in] nRowCount - Number of Rows of the new image.
	* @param[in] eReadFormat - Image format to output.
	* @return Mat instance of the image that has been loaded.
	*/
	PMat COpenCVContext::CreateEmptyImage(const LibOpenCV_uint32 nColumnCount, const LibOpenCV_uint32 nRowCount, const eImageReadFormat eReadFormat)
	{
		LibOpenCVHandle hMatInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_OpenCVContext_CreateEmptyImage(m_pHandle, nColumnCount, nRowCount, eReadFormat, &hMatInstance));
		
		if (!hMatInstance) {
			CheckError(LIBOPENCV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CMat>(m_pWrapper, hMatInstance);
	}

} // namespace LibOpenCV

#endif // __LIBOPENCV_CPPHEADER_DYNAMIC_CPP

