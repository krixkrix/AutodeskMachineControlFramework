/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of Library Wrapper for OpenCV Computer Vision Library

Interface version: 1.2.0

*/

#ifndef __LIBOPENCV_TYPES_HEADER_CPP
#define __LIBOPENCV_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBOPENCV_USELEGACYINTEGERTYPES

typedef unsigned char LibOpenCV_uint8;
typedef unsigned short LibOpenCV_uint16 ;
typedef unsigned int LibOpenCV_uint32;
typedef unsigned long long LibOpenCV_uint64;
typedef char LibOpenCV_int8;
typedef short LibOpenCV_int16;
typedef int LibOpenCV_int32;
typedef long long LibOpenCV_int64;

#else // LIBOPENCV_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibOpenCV_uint8;
typedef uint16_t LibOpenCV_uint16;
typedef uint32_t LibOpenCV_uint32;
typedef uint64_t LibOpenCV_uint64;
typedef int8_t LibOpenCV_int8;
typedef int16_t LibOpenCV_int16;
typedef int32_t LibOpenCV_int32;
typedef int64_t LibOpenCV_int64 ;

#endif // LIBOPENCV_USELEGACYINTEGERTYPES

typedef float LibOpenCV_single;
typedef double LibOpenCV_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibOpenCV_int32 LibOpenCVResult;
typedef void * LibOpenCVHandle;
typedef void * LibOpenCV_pvoid;

/*************************************************************************************************************************
 Version for LibOpenCV
**************************************************************************************************************************/

#define LIBOPENCV_VERSION_MAJOR 1
#define LIBOPENCV_VERSION_MINOR 2
#define LIBOPENCV_VERSION_MICRO 0
#define LIBOPENCV_VERSION_PRERELEASEINFO ""
#define LIBOPENCV_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibOpenCV
**************************************************************************************************************************/

#define LIBOPENCV_SUCCESS 0
#define LIBOPENCV_ERROR_NOTIMPLEMENTED 1001 /** functionality not implemented */
#define LIBOPENCV_ERROR_INVALIDPARAM 1002 /** an invalid parameter was passed */
#define LIBOPENCV_ERROR_INVALIDCAST 1003 /** a type cast failed */
#define LIBOPENCV_ERROR_BUFFERTOOSMALL 1004 /** a provided buffer is too small */
#define LIBOPENCV_ERROR_GENERICEXCEPTION 1005 /** a generic exception occurred */
#define LIBOPENCV_ERROR_COULDNOTLOADLIBRARY 1006 /** the library could not be loaded */
#define LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT 1007 /** a required exported symbol could not be found in the library */
#define LIBOPENCV_ERROR_INCOMPATIBLEBINARYVERSION 1008 /** the version of the binary interface does not match the bindings interface */
#define LIBOPENCV_ERROR_INVALIDREADFORMAT 1009 /** Invalid read format */
#define LIBOPENCV_ERROR_COULDNOTREADIMAGEFILE 1010 /** Could not read image file */
#define LIBOPENCV_ERROR_COULDNOTCREATEEMPTYIMAGE 1011 /** Could not create empty image */
#define LIBOPENCV_ERROR_COULDNOTWRITEIMAGEFILE 1012 /** Could not write image file */

/*************************************************************************************************************************
 Error strings for LibOpenCV
**************************************************************************************************************************/

inline const char * LIBOPENCV_GETERRORSTRING (LibOpenCVResult nErrorCode) {
  switch (nErrorCode) {
    case LIBOPENCV_SUCCESS: return "no error";
    case LIBOPENCV_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBOPENCV_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBOPENCV_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBOPENCV_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBOPENCV_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBOPENCV_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBOPENCV_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBOPENCV_ERROR_INVALIDREADFORMAT: return "Invalid read format";
    case LIBOPENCV_ERROR_COULDNOTREADIMAGEFILE: return "Could not read image file";
    case LIBOPENCV_ERROR_COULDNOTCREATEEMPTYIMAGE: return "Could not create empty image";
    case LIBOPENCV_ERROR_COULDNOTWRITEIMAGEFILE: return "Could not write image file";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibOpenCVHandle LibOpenCV_Base;
typedef LibOpenCVHandle LibOpenCV_ImageSaveParameters;
typedef LibOpenCVHandle LibOpenCV_Mat;
typedef LibOpenCVHandle LibOpenCV_OpenCVContext;

namespace LibOpenCV {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eImageReadFormat : LibOpenCV_int32 {
    Unknown = 0,
    GrayScale = 1,
    BGR = 2,
    RGB = 3
  };
  
} // namespace LibOpenCV;

// define legacy C-names for enums, structs and function types
typedef LibOpenCV::eImageReadFormat eLibOpenCVImageReadFormat;

#endif // __LIBOPENCV_TYPES_HEADER_CPP
