/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Library Wrapper for OpenCV Computer Vision Library. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.2.0

*/

#include "libopencv_abi.hpp"
#include "libopencv_interfaces.hpp"
#include "libopencv_interfaceexception.hpp"
#include "libopencv_interfacejournal.hpp"

#include <map>

using namespace LibOpenCV::Impl;

PLibOpenCVInterfaceJournal m_GlobalJournal;

LibOpenCVResult handleLibOpenCVException(IBase * pIBaseClass, ELibOpenCVInterfaceException & Exception, CLibOpenCVInterfaceJournalEntry * pJournalEntry = nullptr)
{
	LibOpenCVResult errorCode = Exception.getErrorCode();

	if (pJournalEntry != nullptr)
		pJournalEntry->writeError(errorCode);

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibOpenCVResult handleStdException(IBase * pIBaseClass, std::exception & Exception, CLibOpenCVInterfaceJournalEntry * pJournalEntry = nullptr)
{
	LibOpenCVResult errorCode = LIBOPENCV_ERROR_GENERICEXCEPTION;

	if (pJournalEntry != nullptr)
		pJournalEntry->writeError(errorCode);

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibOpenCVResult handleUnhandledException(IBase * pIBaseClass, CLibOpenCVInterfaceJournalEntry * pJournalEntry = nullptr)
{
	LibOpenCVResult errorCode = LIBOPENCV_ERROR_GENERICEXCEPTION;

	if (pJournalEntry != nullptr)
		pJournalEntry->writeError(errorCode);

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for ImageSaveParameters
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Mat
**************************************************************************************************************************/
LibOpenCVResult libopencv_mat_empty(LibOpenCV_Mat pMat, bool * pIsEmpty)
{
	IBase* pIBaseClass = (IBase *)pMat;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMat, "Mat", "Empty");
		}
		if (pIsEmpty == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		IMat* pIMat = dynamic_cast<IMat*>(pIBaseClass);
		if (!pIMat)
			throw ELibOpenCVInterfaceException(LIBOPENCV_ERROR_INVALIDCAST);
		
		*pIsEmpty = pIMat->Empty();

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult("IsEmpty", *pIsEmpty);
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibOpenCVResult libopencv_mat_cols(LibOpenCV_Mat pMat, LibOpenCV_uint32 * pNumberOfColumns)
{
	IBase* pIBaseClass = (IBase *)pMat;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMat, "Mat", "Cols");
		}
		if (pNumberOfColumns == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		IMat* pIMat = dynamic_cast<IMat*>(pIBaseClass);
		if (!pIMat)
			throw ELibOpenCVInterfaceException(LIBOPENCV_ERROR_INVALIDCAST);
		
		*pNumberOfColumns = pIMat->Cols();

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result("NumberOfColumns", *pNumberOfColumns);
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibOpenCVResult libopencv_mat_rows(LibOpenCV_Mat pMat, LibOpenCV_uint32 * pNumberOfRows)
{
	IBase* pIBaseClass = (IBase *)pMat;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMat, "Mat", "Rows");
		}
		if (pNumberOfRows == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		IMat* pIMat = dynamic_cast<IMat*>(pIBaseClass);
		if (!pIMat)
			throw ELibOpenCVInterfaceException(LIBOPENCV_ERROR_INVALIDCAST);
		
		*pNumberOfRows = pIMat->Rows();

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result("NumberOfRows", *pNumberOfRows);
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibOpenCVResult libopencv_mat_writetofile(LibOpenCV_Mat pMat, const char * pFileName, LibOpenCV_ImageSaveParameters pSaveParameters)
{
	IBase* pIBaseClass = (IBase *)pMat;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMat, "Mat", "WriteToFile");
			pJournalEntry->addStringParameter("FileName", pFileName);
			pJournalEntry->addHandleParameter("SaveParameters", pSaveParameters);
		}
		if (pFileName == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		std::string sFileName(pFileName);
		IBase* pIBaseClassSaveParameters = (IBase *)pSaveParameters;
		IImageSaveParameters* pISaveParameters = dynamic_cast<IImageSaveParameters*>(pIBaseClassSaveParameters);
		IMat* pIMat = dynamic_cast<IMat*>(pIBaseClass);
		if (!pIMat)
			throw ELibOpenCVInterfaceException(LIBOPENCV_ERROR_INVALIDCAST);
		
		pIMat->WriteToFile(sFileName, pISaveParameters);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}


/*************************************************************************************************************************
 Class implementation for OpenCVContext
**************************************************************************************************************************/
LibOpenCVResult libopencv_opencvcontext_loadimagefromfile(LibOpenCV_OpenCVContext pOpenCVContext, const char * pFileName, eLibOpenCVImageReadFormat eReadFormat, LibOpenCV_Mat * pMatInstance)
{
	IBase* pIBaseClass = (IBase *)pOpenCVContext;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pOpenCVContext, "OpenCVContext", "LoadImageFromFile");
			pJournalEntry->addStringParameter("FileName", pFileName);
			pJournalEntry->addEnumParameter("ReadFormat", "ImageReadFormat", (LibOpenCV_int32)(eReadFormat));
		}
		if (pFileName == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		if (pMatInstance == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		std::string sFileName(pFileName);
		IBase* pBaseMatInstance(nullptr);
		IOpenCVContext* pIOpenCVContext = dynamic_cast<IOpenCVContext*>(pIBaseClass);
		if (!pIOpenCVContext)
			throw ELibOpenCVInterfaceException(LIBOPENCV_ERROR_INVALIDCAST);
		
		pBaseMatInstance = pIOpenCVContext->LoadImageFromFile(sFileName, eReadFormat);

		*pMatInstance = (IBase*)(pBaseMatInstance);
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult("MatInstance", *pMatInstance);
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibOpenCVResult libopencv_opencvcontext_createemptyimage(LibOpenCV_OpenCVContext pOpenCVContext, LibOpenCV_uint32 nColumnCount, LibOpenCV_uint32 nRowCount, eLibOpenCVImageReadFormat eReadFormat, LibOpenCV_Mat * pMatInstance)
{
	IBase* pIBaseClass = (IBase *)pOpenCVContext;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pOpenCVContext, "OpenCVContext", "CreateEmptyImage");
			pJournalEntry->addUInt32Parameter("ColumnCount", nColumnCount);
			pJournalEntry->addUInt32Parameter("RowCount", nRowCount);
			pJournalEntry->addEnumParameter("ReadFormat", "ImageReadFormat", (LibOpenCV_int32)(eReadFormat));
		}
		if (pMatInstance == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		IBase* pBaseMatInstance(nullptr);
		IOpenCVContext* pIOpenCVContext = dynamic_cast<IOpenCVContext*>(pIBaseClass);
		if (!pIOpenCVContext)
			throw ELibOpenCVInterfaceException(LIBOPENCV_ERROR_INVALIDCAST);
		
		pBaseMatInstance = pIOpenCVContext->CreateEmptyImage(nColumnCount, nRowCount, eReadFormat);

		*pMatInstance = (IBase*)(pBaseMatInstance);
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult("MatInstance", *pMatInstance);
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibOpenCVResult LibOpenCV::Impl::LibOpenCV_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBOPENCV_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBOPENCV_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libopencv_mat_empty") 
		*ppProcAddress = (void*) &libopencv_mat_empty;
	if (sProcName == "libopencv_mat_cols") 
		*ppProcAddress = (void*) &libopencv_mat_cols;
	if (sProcName == "libopencv_mat_rows") 
		*ppProcAddress = (void*) &libopencv_mat_rows;
	if (sProcName == "libopencv_mat_writetofile") 
		*ppProcAddress = (void*) &libopencv_mat_writetofile;
	if (sProcName == "libopencv_opencvcontext_loadimagefromfile") 
		*ppProcAddress = (void*) &libopencv_opencvcontext_loadimagefromfile;
	if (sProcName == "libopencv_opencvcontext_createemptyimage") 
		*ppProcAddress = (void*) &libopencv_opencvcontext_createemptyimage;
	if (sProcName == "libopencv_getversion") 
		*ppProcAddress = (void*) &libopencv_getversion;
	if (sProcName == "libopencv_getlasterror") 
		*ppProcAddress = (void*) &libopencv_getlasterror;
	if (sProcName == "libopencv_acquireinstance") 
		*ppProcAddress = (void*) &libopencv_acquireinstance;
	if (sProcName == "libopencv_releaseinstance") 
		*ppProcAddress = (void*) &libopencv_releaseinstance;
	if (sProcName == "libopencv_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libopencv_getsymbollookupmethod;
	if (sProcName == "libopencv_createcontext") 
		*ppProcAddress = (void*) &libopencv_createcontext;
	
	if (*ppProcAddress == nullptr) 
		return LIBOPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBOPENCV_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibOpenCVResult libopencv_getversion(LibOpenCV_uint32 * pMajor, LibOpenCV_uint32 * pMinor, LibOpenCV_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("GetVersion");
		}
		if (!pMajor)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result("Major", *pMajor);
			pJournalEntry->addUInt32Result("Minor", *pMinor);
			pJournalEntry->addUInt32Result("Micro", *pMicro);
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibOpenCVResult libopencv_getlasterror(LibOpenCV_Base pInstance, const LibOpenCV_uint32 nErrorMessageBufferSize, LibOpenCV_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("GetLastError");
			pJournalEntry->addHandleParameter("Instance", pInstance);
		}
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibOpenCV_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult("ErrorMessage", sErrorMessage.c_str());
			pJournalEntry->addBooleanResult("HasError", *pHasError);
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibOpenCVResult libopencv_acquireinstance(LibOpenCV_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("AcquireInstance");
			pJournalEntry->addHandleParameter("Instance", pInstance);
		}
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibOpenCVResult libopencv_releaseinstance(LibOpenCV_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("ReleaseInstance");
			pJournalEntry->addHandleParameter("Instance", pInstance);
		}
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibOpenCVResult libopencv_getsymbollookupmethod(LibOpenCV_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("GetSymbolLookupMethod");
		}
		if (pSymbolLookupMethod == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibOpenCV::Impl::LibOpenCV_GetProcAddress;
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addPointerResult("SymbolLookupMethod", *pSymbolLookupMethod);
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibOpenCVResult libopencv_createcontext(LibOpenCV_OpenCVContext * pContextInstance)
{
	IBase* pIBaseClass = nullptr;

	PLibOpenCVInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("CreateContext");
		}
		if (pContextInstance == nullptr)
			throw ELibOpenCVInterfaceException (LIBOPENCV_ERROR_INVALIDPARAM);
		IBase* pBaseContextInstance(nullptr);
		pBaseContextInstance = CWrapper::CreateContext();

		*pContextInstance = (IBase*)(pBaseContextInstance);
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult("ContextInstance", *pContextInstance);
			pJournalEntry->writeSuccess();
		}
		return LIBOPENCV_SUCCESS;
	}
	catch (ELibOpenCVInterfaceException & Exception) {
		return handleLibOpenCVException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}


