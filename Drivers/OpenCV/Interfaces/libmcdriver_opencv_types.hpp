/*++

Copyright (C) 2025 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver for OpenCV Computer Vision Library

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_OPENCV_TYPES_HEADER_CPP
#define __LIBMCDRIVER_OPENCV_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_OPENCV_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_OpenCV_uint8;
typedef unsigned short LibMCDriver_OpenCV_uint16 ;
typedef unsigned int LibMCDriver_OpenCV_uint32;
typedef unsigned long long LibMCDriver_OpenCV_uint64;
typedef char LibMCDriver_OpenCV_int8;
typedef short LibMCDriver_OpenCV_int16;
typedef int LibMCDriver_OpenCV_int32;
typedef long long LibMCDriver_OpenCV_int64;

#else // LIBMCDRIVER_OPENCV_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_OpenCV_uint8;
typedef uint16_t LibMCDriver_OpenCV_uint16;
typedef uint32_t LibMCDriver_OpenCV_uint32;
typedef uint64_t LibMCDriver_OpenCV_uint64;
typedef int8_t LibMCDriver_OpenCV_int8;
typedef int16_t LibMCDriver_OpenCV_int16;
typedef int32_t LibMCDriver_OpenCV_int32;
typedef int64_t LibMCDriver_OpenCV_int64 ;

#endif // LIBMCDRIVER_OPENCV_USELEGACYINTEGERTYPES

typedef float LibMCDriver_OpenCV_single;
typedef double LibMCDriver_OpenCV_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_OpenCV_int32 LibMCDriver_OpenCVResult;
typedef void * LibMCDriver_OpenCVHandle;
typedef void * LibMCDriver_OpenCV_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_OpenCV
**************************************************************************************************************************/

#define LIBMCDRIVER_OPENCV_VERSION_MAJOR 2
#define LIBMCDRIVER_OPENCV_VERSION_MINOR 0
#define LIBMCDRIVER_OPENCV_VERSION_MICRO 0
#define LIBMCDRIVER_OPENCV_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_OPENCV_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_OpenCV
**************************************************************************************************************************/

#define LIBMCDRIVER_OPENCV_SUCCESS 0
#define LIBMCDRIVER_OPENCV_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_OPENCV_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_OPENCV_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_OPENCV_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_OPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_OPENCV_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_OPENCV_ERROR_UNKNOWNIMAGEWRITEFORMAT 9 /** unknown image write format */
#define LIBMCDRIVER_OPENCV_ERROR_COULDNOTWRITEIMAGETODISK 10 /** could not write image to disk */
#define LIBMCDRIVER_OPENCV_ERROR_EMPTYFILENAME 11 /** empty file name */
#define LIBMCDRIVER_OPENCV_ERROR_COULDNOTCONVERTFILENAME 12 /** could not convert filename */
#define LIBMCDRIVER_OPENCV_ERROR_COULDNOTGETSHORTPATHNAME 13 /** could not get short path name */
#define LIBMCDRIVER_OPENCV_ERROR_COULDNOTCONVERTSHORTFILENAME 14 /** could not convert short path name */

/*************************************************************************************************************************
 Error strings for LibMCDriver_OpenCV
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_OPENCV_GETERRORSTRING (LibMCDriver_OpenCVResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_OPENCV_SUCCESS: return "no error";
    case LIBMCDRIVER_OPENCV_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_OPENCV_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_OPENCV_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_OPENCV_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_OPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_OPENCV_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_OPENCV_ERROR_UNKNOWNIMAGEWRITEFORMAT: return "unknown image write format";
    case LIBMCDRIVER_OPENCV_ERROR_COULDNOTWRITEIMAGETODISK: return "could not write image to disk";
    case LIBMCDRIVER_OPENCV_ERROR_EMPTYFILENAME: return "empty file name";
    case LIBMCDRIVER_OPENCV_ERROR_COULDNOTCONVERTFILENAME: return "could not convert filename";
    case LIBMCDRIVER_OPENCV_ERROR_COULDNOTGETSHORTPATHNAME: return "could not get short path name";
    case LIBMCDRIVER_OPENCV_ERROR_COULDNOTCONVERTSHORTFILENAME: return "could not convert short path name";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_OpenCVHandle LibMCDriver_OpenCV_Base;
typedef LibMCDriver_OpenCVHandle LibMCDriver_OpenCV_Driver;
typedef LibMCDriver_OpenCVHandle LibMCDriver_OpenCV_ImageSaveParameters;
typedef LibMCDriver_OpenCVHandle LibMCDriver_OpenCV_ImageBuffer;
typedef LibMCDriver_OpenCVHandle LibMCDriver_OpenCV_Mat;
typedef LibMCDriver_OpenCVHandle LibMCDriver_OpenCV_Driver_OpenCV;

namespace LibMCDriver_OpenCV {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eImageReadFormat : LibMCDriver_OpenCV_int32 {
    Unknown = 0,
    GrayScale = 1,
    BGR = 2,
    RGB = 3
  };
  
  enum class eImageWriteFormat : LibMCDriver_OpenCV_int32 {
    Unknown = 0,
    PNG = 1,
    JPEG = 2
  };
  
} // namespace LibMCDriver_OpenCV;

// define legacy C-names for enums, structs and function types
typedef LibMCDriver_OpenCV::eImageReadFormat eLibMCDriver_OpenCVImageReadFormat;
typedef LibMCDriver_OpenCV::eImageWriteFormat eLibMCDriver_OpenCVImageWriteFormat;

#endif // __LIBMCDRIVER_OPENCV_TYPES_HEADER_CPP
