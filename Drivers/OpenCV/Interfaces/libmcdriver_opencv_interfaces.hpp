/*++

Copyright (C) 2025 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Driver for OpenCV Computer Vision Library. The implementer of MC Driver for OpenCV Computer Vision Library needs to
derive concrete classes from the abstract classes in this header.

Interface version: 2.0.0

*/


#ifndef __LIBMCDRIVER_OPENCV_CPPINTERFACES
#define __LIBMCDRIVER_OPENCV_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_opencv_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_OpenCV {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class IImageSaveParameters;
class IImageBuffer;
class IMat;
class IDriver_OpenCV;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_OpenCV_uint32 & nMajor, LibMCDriver_OpenCV_uint32 & nMinor, LibMCDriver_OpenCV_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	virtual void QueryParameters() = 0;

	/**
	* IDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	virtual void QueryParametersEx(LibMCEnv::PDriverStatusUpdateSession pDriverUpdateInstance) = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for ImageSaveParameters 
**************************************************************************************************************************/

class IImageSaveParameters : public virtual IBase {
public:
};

typedef IBaseSharedPtr<IImageSaveParameters> PIImageSaveParameters;


/*************************************************************************************************************************
 Class interface for ImageBuffer 
**************************************************************************************************************************/

class IImageBuffer : public virtual IBase {
public:
	/**
	* IImageBuffer::GetImageFormat - Retrieves the image format of the encoded buffer.
	* @return Format to write to.
	*/
	virtual LibMCDriver_OpenCV::eImageWriteFormat GetImageFormat() = 0;

	/**
	* IImageBuffer::GetSize - Retrieves the size of the encoded buffer.
	* @return Size of the buffer.
	*/
	virtual LibMCDriver_OpenCV_uint64 GetSize() = 0;

	/**
	* IImageBuffer::GetData - Retrieves the data of the encoded buffer.
	* @param[in] nMemoryArrayBufferSize - Number of elements in buffer
	* @param[out] pMemoryArrayNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pMemoryArrayBuffer - uint8 buffer of Array to write into.
	*/
	virtual void GetData(LibMCDriver_OpenCV_uint64 nMemoryArrayBufferSize, LibMCDriver_OpenCV_uint64* pMemoryArrayNeededCount, LibMCDriver_OpenCV_uint8 * pMemoryArrayBuffer) = 0;

	/**
	* IImageBuffer::StoreToStream - Stores the data in a temporary file stream.
	* @param[in] pStream - Stream to store the data to.
	*/
	virtual void StoreToStream(LibMCEnv::PTempStreamWriter pStream) = 0;

};

typedef IBaseSharedPtr<IImageBuffer> PIImageBuffer;


/*************************************************************************************************************************
 Class interface for Mat 
**************************************************************************************************************************/

class IMat : public virtual IBase {
public:
	/**
	* IMat::Empty - Returns if the Mat instance is empty.
	* @return Returns true if the Mat instance is empty. False otherwise.
	*/
	virtual bool Empty() = 0;

	/**
	* IMat::Cols - Returns the number of columns.
	* @return Returns the number of columns of the matrix.
	*/
	virtual LibMCDriver_OpenCV_uint32 Cols() = 0;

	/**
	* IMat::Rows - Returns the number of rows.
	* @return Returns the number of rows of the matrix.
	*/
	virtual LibMCDriver_OpenCV_uint32 Rows() = 0;

	/**
	* IMat::EncodeImage - Writes a matrix as image buffer.
	* @param[in] eWriteFormat - Format to write to.
	* @param[in] pSaveParameters - Optional parameters for writing the image file.
	* @return Returns an image buffer object.
	*/
	virtual IImageBuffer * EncodeImage(const LibMCDriver_OpenCV::eImageWriteFormat eWriteFormat, IImageSaveParameters* pSaveParameters) = 0;

	/**
	* IMat::EncodeImageToStream - Writes a matrix into a temporary file stream.
	* @param[in] eWriteFormat - Format to write to.
	* @param[in] pSaveParameters - Optional parameters for writing the image file.
	* @param[in] pStream - Stream to store the data to.
	*/
	virtual void EncodeImageToStream(const LibMCDriver_OpenCV::eImageWriteFormat eWriteFormat, IImageSaveParameters* pSaveParameters, LibMCEnv::PTempStreamWriter pStream) = 0;

};

typedef IBaseSharedPtr<IMat> PIMat;


/*************************************************************************************************************************
 Class interface for Driver_OpenCV 
**************************************************************************************************************************/

class IDriver_OpenCV : public virtual IDriver {
public:
	/**
	* IDriver_OpenCV::LoadImageFromBuffer - Loads an image from a memory buffer.
	* @param[in] nBufferBufferSize - Number of elements in buffer
	* @param[in] pBufferBuffer - Image data to read from.
	* @param[in] eReadFormat - Image format to output.
	* @return Mat instance of the image that has been loaded.
	*/
	virtual IMat * LoadImageFromBuffer(const LibMCDriver_OpenCV_uint64 nBufferBufferSize, const LibMCDriver_OpenCV_uint8 * pBufferBuffer, const LibMCDriver_OpenCV::eImageReadFormat eReadFormat) = 0;

	/**
	* IDriver_OpenCV::LoadImageFromResource - Loads an image from a resource identifier.
	* @param[in] sResourceIdentifier - Image resource to read from.
	* @param[in] eReadFormat - Image format to output.
	* @return Mat instance of the image that has been loaded.
	*/
	virtual IMat * LoadImageFromResource(const std::string & sResourceIdentifier, const LibMCDriver_OpenCV::eImageReadFormat eReadFormat) = 0;

	/**
	* IDriver_OpenCV::CreateEmptyImage - Creates an empty image.
	* @param[in] nColumnCount - Number of Column of the new image.
	* @param[in] nRowCount - Number of Rows of the new image.
	* @param[in] eReadFormat - Image format to output.
	* @return Mat instance of the image that has been loaded.
	*/
	virtual IMat * CreateEmptyImage(const LibMCDriver_OpenCV_uint32 nColumnCount, const LibMCDriver_OpenCV_uint32 nRowCount, const LibMCDriver_OpenCV::eImageReadFormat eReadFormat) = 0;

};

typedef IBaseSharedPtr<IDriver_OpenCV> PIDriver_OpenCV;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_opencv::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_OpenCV_uint32 & nMajor, LibMCDriver_OpenCV_uint32 & nMinor, LibMCDriver_OpenCV_uint32 & nMicro);

	/**
	* Ilibmcdriver_opencv::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_opencv::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_opencv::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_opencv::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_OpenCVResult LibMCDriver_OpenCV_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_OpenCV

#endif // __LIBMCDRIVER_OPENCV_CPPINTERFACES
