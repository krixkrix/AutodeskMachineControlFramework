/*++

Copyright (C) 2025 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver for OpenCV Computer Vision Library. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_opencv_abi.hpp"
#include "libmcdriver_opencv_interfaces.hpp"
#include "libmcdriver_opencv_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_OpenCV::Impl;

LibMCDriver_OpenCVResult handleLibMCDriver_OpenCVException(IBase * pIBaseClass, ELibMCDriver_OpenCVInterfaceException & Exception)
{
	LibMCDriver_OpenCVResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_OpenCVResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_OpenCVResult errorCode = LIBMCDRIVER_OPENCV_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_OpenCVResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_OpenCVResult errorCode = LIBMCDRIVER_OPENCV_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_OpenCVResult libmcdriver_opencv_driver_configure(LibMCDriver_OpenCV_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_driver_getname(LibMCDriver_OpenCV_Driver pDriver, const LibMCDriver_OpenCV_uint32 nNameBufferSize, LibMCDriver_OpenCV_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_OpenCV_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_driver_gettype(LibMCDriver_OpenCV_Driver pDriver, const LibMCDriver_OpenCV_uint32 nTypeBufferSize, LibMCDriver_OpenCV_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_OpenCV_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_driver_getversion(LibMCDriver_OpenCV_Driver pDriver, LibMCDriver_OpenCV_uint32 * pMajor, LibMCDriver_OpenCV_uint32 * pMinor, LibMCDriver_OpenCV_uint32 * pMicro, const LibMCDriver_OpenCV_uint32 nBuildBufferSize, LibMCDriver_OpenCV_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_OpenCV_uint32, LibMCDriver_OpenCV_uint32, LibMCDriver_OpenCV_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_OpenCV_uint32, LibMCDriver_OpenCV_uint32, LibMCDriver_OpenCV_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_OpenCV_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_driver_queryparameters(LibMCDriver_OpenCV_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_driver_queryparametersex(LibMCDriver_OpenCV_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for ImageSaveParameters
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for ImageBuffer
**************************************************************************************************************************/
LibMCDriver_OpenCVResult libmcdriver_opencv_imagebuffer_getimageformat(LibMCDriver_OpenCV_ImageBuffer pImageBuffer, eLibMCDriver_OpenCVImageWriteFormat * pImageFormat)
{
	IBase* pIBaseClass = (IBase *)pImageBuffer;

	try {
		if (pImageFormat == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IImageBuffer* pIImageBuffer = dynamic_cast<IImageBuffer*>(pIBaseClass);
		if (!pIImageBuffer)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		*pImageFormat = pIImageBuffer->GetImageFormat();

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_imagebuffer_getsize(LibMCDriver_OpenCV_ImageBuffer pImageBuffer, LibMCDriver_OpenCV_uint64 * pBufferSize)
{
	IBase* pIBaseClass = (IBase *)pImageBuffer;

	try {
		if (pBufferSize == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IImageBuffer* pIImageBuffer = dynamic_cast<IImageBuffer*>(pIBaseClass);
		if (!pIImageBuffer)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		*pBufferSize = pIImageBuffer->GetSize();

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_imagebuffer_getdata(LibMCDriver_OpenCV_ImageBuffer pImageBuffer, const LibMCDriver_OpenCV_uint64 nMemoryArrayBufferSize, LibMCDriver_OpenCV_uint64* pMemoryArrayNeededCount, LibMCDriver_OpenCV_uint8 * pMemoryArrayBuffer)
{
	IBase* pIBaseClass = (IBase *)pImageBuffer;

	try {
		if ((!pMemoryArrayBuffer) && !(pMemoryArrayNeededCount))
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IImageBuffer* pIImageBuffer = dynamic_cast<IImageBuffer*>(pIBaseClass);
		if (!pIImageBuffer)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pIImageBuffer->GetData(nMemoryArrayBufferSize, pMemoryArrayNeededCount, pMemoryArrayBuffer);

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_imagebuffer_storetostream(LibMCDriver_OpenCV_ImageBuffer pImageBuffer, LibMCEnv_TempStreamWriter pStream)
{
	IBase* pIBaseClass = (IBase *)pImageBuffer;

	try {
		LibMCEnv::PTempStreamWriter pIStream = std::make_shared<LibMCEnv::CTempStreamWriter>(CWrapper::sPLibMCEnvWrapper.get(), pStream);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIStream.get());
		if (!pIStream)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		IImageBuffer* pIImageBuffer = dynamic_cast<IImageBuffer*>(pIBaseClass);
		if (!pIImageBuffer)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pIImageBuffer->StoreToStream(pIStream);

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Mat
**************************************************************************************************************************/
LibMCDriver_OpenCVResult libmcdriver_opencv_mat_empty(LibMCDriver_OpenCV_Mat pMat, bool * pIsEmpty)
{
	IBase* pIBaseClass = (IBase *)pMat;

	try {
		if (pIsEmpty == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IMat* pIMat = dynamic_cast<IMat*>(pIBaseClass);
		if (!pIMat)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		*pIsEmpty = pIMat->Empty();

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_mat_cols(LibMCDriver_OpenCV_Mat pMat, LibMCDriver_OpenCV_uint32 * pNumberOfColumns)
{
	IBase* pIBaseClass = (IBase *)pMat;

	try {
		if (pNumberOfColumns == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IMat* pIMat = dynamic_cast<IMat*>(pIBaseClass);
		if (!pIMat)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		*pNumberOfColumns = pIMat->Cols();

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_mat_rows(LibMCDriver_OpenCV_Mat pMat, LibMCDriver_OpenCV_uint32 * pNumberOfRows)
{
	IBase* pIBaseClass = (IBase *)pMat;

	try {
		if (pNumberOfRows == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IMat* pIMat = dynamic_cast<IMat*>(pIBaseClass);
		if (!pIMat)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		*pNumberOfRows = pIMat->Rows();

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_mat_encodeimage(LibMCDriver_OpenCV_Mat pMat, eLibMCDriver_OpenCVImageWriteFormat eWriteFormat, LibMCDriver_OpenCV_ImageSaveParameters pSaveParameters, LibMCDriver_OpenCV_ImageBuffer * pOutputBuffer)
{
	IBase* pIBaseClass = (IBase *)pMat;

	try {
		if (pOutputBuffer == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IBase* pIBaseClassSaveParameters = (IBase *)pSaveParameters;
		IImageSaveParameters* pISaveParameters = dynamic_cast<IImageSaveParameters*>(pIBaseClassSaveParameters);
		IBase* pBaseOutputBuffer(nullptr);
		IMat* pIMat = dynamic_cast<IMat*>(pIBaseClass);
		if (!pIMat)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pBaseOutputBuffer = pIMat->EncodeImage(eWriteFormat, pISaveParameters);

		*pOutputBuffer = (IBase*)(pBaseOutputBuffer);
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_mat_encodeimagetostream(LibMCDriver_OpenCV_Mat pMat, eLibMCDriver_OpenCVImageWriteFormat eWriteFormat, LibMCDriver_OpenCV_ImageSaveParameters pSaveParameters, LibMCEnv_TempStreamWriter pStream)
{
	IBase* pIBaseClass = (IBase *)pMat;

	try {
		IBase* pIBaseClassSaveParameters = (IBase *)pSaveParameters;
		IImageSaveParameters* pISaveParameters = dynamic_cast<IImageSaveParameters*>(pIBaseClassSaveParameters);
		LibMCEnv::PTempStreamWriter pIStream = std::make_shared<LibMCEnv::CTempStreamWriter>(CWrapper::sPLibMCEnvWrapper.get(), pStream);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIStream.get());
		if (!pIStream)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		IMat* pIMat = dynamic_cast<IMat*>(pIBaseClass);
		if (!pIMat)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pIMat->EncodeImageToStream(eWriteFormat, pISaveParameters, pIStream);

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_OpenCV
**************************************************************************************************************************/
LibMCDriver_OpenCVResult libmcdriver_opencv_driver_opencv_loadimagefrombuffer(LibMCDriver_OpenCV_Driver_OpenCV pDriver_OpenCV, LibMCDriver_OpenCV_uint64 nBufferBufferSize, const LibMCDriver_OpenCV_uint8 * pBufferBuffer, eLibMCDriver_OpenCVImageReadFormat eReadFormat, LibMCDriver_OpenCV_Mat * pMatInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_OpenCV;

	try {
		if ( (!pBufferBuffer) && (nBufferBufferSize>0))
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if (pMatInstance == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IBase* pBaseMatInstance(nullptr);
		IDriver_OpenCV* pIDriver_OpenCV = dynamic_cast<IDriver_OpenCV*>(pIBaseClass);
		if (!pIDriver_OpenCV)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pBaseMatInstance = pIDriver_OpenCV->LoadImageFromBuffer(nBufferBufferSize, pBufferBuffer, eReadFormat);

		*pMatInstance = (IBase*)(pBaseMatInstance);
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_driver_opencv_loadimagefromresource(LibMCDriver_OpenCV_Driver_OpenCV pDriver_OpenCV, const char * pResourceIdentifier, eLibMCDriver_OpenCVImageReadFormat eReadFormat, LibMCDriver_OpenCV_Mat * pMatInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_OpenCV;

	try {
		if (pResourceIdentifier == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if (pMatInstance == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		std::string sResourceIdentifier(pResourceIdentifier);
		IBase* pBaseMatInstance(nullptr);
		IDriver_OpenCV* pIDriver_OpenCV = dynamic_cast<IDriver_OpenCV*>(pIBaseClass);
		if (!pIDriver_OpenCV)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pBaseMatInstance = pIDriver_OpenCV->LoadImageFromResource(sResourceIdentifier, eReadFormat);

		*pMatInstance = (IBase*)(pBaseMatInstance);
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_driver_opencv_createemptyimage(LibMCDriver_OpenCV_Driver_OpenCV pDriver_OpenCV, LibMCDriver_OpenCV_uint32 nColumnCount, LibMCDriver_OpenCV_uint32 nRowCount, eLibMCDriver_OpenCVImageReadFormat eReadFormat, LibMCDriver_OpenCV_Mat * pMatInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_OpenCV;

	try {
		if (pMatInstance == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IBase* pBaseMatInstance(nullptr);
		IDriver_OpenCV* pIDriver_OpenCV = dynamic_cast<IDriver_OpenCV*>(pIBaseClass);
		if (!pIDriver_OpenCV)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		pBaseMatInstance = pIDriver_OpenCV->CreateEmptyImage(nColumnCount, nRowCount, eReadFormat);

		*pMatInstance = (IBase*)(pBaseMatInstance);
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_OpenCVResult LibMCDriver_OpenCV::Impl::LibMCDriver_OpenCV_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_opencv_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_opencv_driver_configure;
	if (sProcName == "libmcdriver_opencv_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_opencv_driver_getname;
	if (sProcName == "libmcdriver_opencv_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_opencv_driver_gettype;
	if (sProcName == "libmcdriver_opencv_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_opencv_driver_getversion;
	if (sProcName == "libmcdriver_opencv_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_opencv_driver_queryparameters;
	if (sProcName == "libmcdriver_opencv_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_opencv_driver_queryparametersex;
	if (sProcName == "libmcdriver_opencv_imagebuffer_getimageformat") 
		*ppProcAddress = (void*) &libmcdriver_opencv_imagebuffer_getimageformat;
	if (sProcName == "libmcdriver_opencv_imagebuffer_getsize") 
		*ppProcAddress = (void*) &libmcdriver_opencv_imagebuffer_getsize;
	if (sProcName == "libmcdriver_opencv_imagebuffer_getdata") 
		*ppProcAddress = (void*) &libmcdriver_opencv_imagebuffer_getdata;
	if (sProcName == "libmcdriver_opencv_imagebuffer_storetostream") 
		*ppProcAddress = (void*) &libmcdriver_opencv_imagebuffer_storetostream;
	if (sProcName == "libmcdriver_opencv_mat_empty") 
		*ppProcAddress = (void*) &libmcdriver_opencv_mat_empty;
	if (sProcName == "libmcdriver_opencv_mat_cols") 
		*ppProcAddress = (void*) &libmcdriver_opencv_mat_cols;
	if (sProcName == "libmcdriver_opencv_mat_rows") 
		*ppProcAddress = (void*) &libmcdriver_opencv_mat_rows;
	if (sProcName == "libmcdriver_opencv_mat_encodeimage") 
		*ppProcAddress = (void*) &libmcdriver_opencv_mat_encodeimage;
	if (sProcName == "libmcdriver_opencv_mat_encodeimagetostream") 
		*ppProcAddress = (void*) &libmcdriver_opencv_mat_encodeimagetostream;
	if (sProcName == "libmcdriver_opencv_driver_opencv_loadimagefrombuffer") 
		*ppProcAddress = (void*) &libmcdriver_opencv_driver_opencv_loadimagefrombuffer;
	if (sProcName == "libmcdriver_opencv_driver_opencv_loadimagefromresource") 
		*ppProcAddress = (void*) &libmcdriver_opencv_driver_opencv_loadimagefromresource;
	if (sProcName == "libmcdriver_opencv_driver_opencv_createemptyimage") 
		*ppProcAddress = (void*) &libmcdriver_opencv_driver_opencv_createemptyimage;
	if (sProcName == "libmcdriver_opencv_getversion") 
		*ppProcAddress = (void*) &libmcdriver_opencv_getversion;
	if (sProcName == "libmcdriver_opencv_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_opencv_getlasterror;
	if (sProcName == "libmcdriver_opencv_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_opencv_releaseinstance;
	if (sProcName == "libmcdriver_opencv_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_opencv_acquireinstance;
	if (sProcName == "libmcdriver_opencv_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_opencv_injectcomponent;
	if (sProcName == "libmcdriver_opencv_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_opencv_getsymbollookupmethod;
	if (sProcName == "libmcdriver_opencv_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_opencv_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_OPENCV_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_OPENCV_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_OpenCVResult libmcdriver_opencv_getversion(LibMCDriver_OpenCV_uint32 * pMajor, LibMCDriver_OpenCV_uint32 * pMinor, LibMCDriver_OpenCV_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_getlasterror(LibMCDriver_OpenCV_Base pInstance, const LibMCDriver_OpenCV_uint32 nErrorMessageBufferSize, LibMCDriver_OpenCV_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_OpenCV_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_releaseinstance(LibMCDriver_OpenCV_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_acquireinstance(LibMCDriver_OpenCV_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_injectcomponent(const char * pNameSpace, LibMCDriver_OpenCV_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_OpenCVInterfaceException(LIBMCDRIVER_OPENCV_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_getsymbollookupmethod(LibMCDriver_OpenCV_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_OpenCV::Impl::LibMCDriver_OpenCV_GetProcAddress;
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OpenCVResult libmcdriver_opencv_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_OpenCV_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_OpenCVInterfaceException (LIBMCDRIVER_OPENCV_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_OPENCV_SUCCESS;
	}
	catch (ELibMCDriver_OpenCVInterfaceException & Exception) {
		return handleLibMCDriver_OpenCVException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


